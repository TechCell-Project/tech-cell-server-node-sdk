/* tslint:disable */
/* eslint-disable */
/**
 * TechCell RESTful API Documentations
 * This is the documentation for the TechCell RESTful API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: teams@techcell.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { GetOrderByIdResponseDTO } from '../models';
// @ts-ignore
import { ListOrderResponseDTO } from '../models';
// @ts-ignore
import { OrderSchemaDTO } from '../models';
// @ts-ignore
import { UpdateOrderStatusDTO } from '../models';
/**
 * OrdersManagementApi - axios parameter creator
 * @export
 */
export const OrdersManagementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get order by id
         * @param {string} id A valid mongodb id
         * @param {GetOrderXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder: async (id: string, xLang?: GetOrderXLangEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOrder', 'id', id)
            const localVarPath = `/orders-mnt/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get orders
         * @param {number} [page] Page number
         * @param {number} [pageSize] Number of items per page
         * @param {string} [orderId] Order ID to filter orders by order
         * @param {string} [userId] User ID to filter orders by user
         * @param {string} [productId] Product ID to filter orders by product
         * @param {string} [trackingCode] Tracking code to filter orders by tracking code
         * @param {GetOrdersPaymentMethodEnum} [paymentMethod] Payment method to filter orders by payment method
         * @param {GetOrdersPaymentStatusEnum} [paymentStatus] Payment status to filter orders by payment status
         * @param {GetOrdersOrderStatusEnum} [orderStatus] Order status to filter orders by order status
         * @param {GetOrdersOrderByEnum} [orderBy] Order by to filter orders by order by
         * @param {GetOrdersOrderTypeEnum} [orderType] Order type to filter orders by order type
         * @param {GetOrdersXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrders: async (page?: number, pageSize?: number, orderId?: string, userId?: string, productId?: string, trackingCode?: string, paymentMethod?: GetOrdersPaymentMethodEnum, paymentStatus?: GetOrdersPaymentStatusEnum, orderStatus?: GetOrdersOrderStatusEnum, orderBy?: GetOrdersOrderByEnum, orderType?: GetOrdersOrderTypeEnum, xLang?: GetOrdersXLangEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/orders-mnt`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (orderId !== undefined) {
                localVarQueryParameter['orderId'] = orderId;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }

            if (trackingCode !== undefined) {
                localVarQueryParameter['trackingCode'] = trackingCode;
            }

            if (paymentMethod !== undefined) {
                localVarQueryParameter['paymentMethod'] = paymentMethod;
            }

            if (paymentStatus !== undefined) {
                localVarQueryParameter['paymentStatus'] = paymentStatus;
            }

            if (orderStatus !== undefined) {
                localVarQueryParameter['orderStatus'] = orderStatus;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (orderType !== undefined) {
                localVarQueryParameter['orderType'] = orderType;
            }

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update order status
         * @param {string} id A valid mongodb id
         * @param {UpdateOrderStatusDTO} updateOrderStatusDTO 
         * @param {UpdateOrderStatusXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrderStatus: async (id: string, updateOrderStatusDTO: UpdateOrderStatusDTO, xLang?: UpdateOrderStatusXLangEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateOrderStatus', 'id', id)
            // verify required parameter 'updateOrderStatusDTO' is not null or undefined
            assertParamExists('updateOrderStatus', 'updateOrderStatusDTO', updateOrderStatusDTO)
            const localVarPath = `/orders-mnt/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateOrderStatusDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrdersManagementApi - functional programming interface
 * @export
 */
export const OrdersManagementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrdersManagementApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get order by id
         * @param {string} id A valid mongodb id
         * @param {GetOrderXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrder(id: string, xLang?: GetOrderXLangEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrderByIdResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrder(id, xLang, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrdersManagementApi.getOrder']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get orders
         * @param {number} [page] Page number
         * @param {number} [pageSize] Number of items per page
         * @param {string} [orderId] Order ID to filter orders by order
         * @param {string} [userId] User ID to filter orders by user
         * @param {string} [productId] Product ID to filter orders by product
         * @param {string} [trackingCode] Tracking code to filter orders by tracking code
         * @param {GetOrdersPaymentMethodEnum} [paymentMethod] Payment method to filter orders by payment method
         * @param {GetOrdersPaymentStatusEnum} [paymentStatus] Payment status to filter orders by payment status
         * @param {GetOrdersOrderStatusEnum} [orderStatus] Order status to filter orders by order status
         * @param {GetOrdersOrderByEnum} [orderBy] Order by to filter orders by order by
         * @param {GetOrdersOrderTypeEnum} [orderType] Order type to filter orders by order type
         * @param {GetOrdersXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrders(page?: number, pageSize?: number, orderId?: string, userId?: string, productId?: string, trackingCode?: string, paymentMethod?: GetOrdersPaymentMethodEnum, paymentStatus?: GetOrdersPaymentStatusEnum, orderStatus?: GetOrdersOrderStatusEnum, orderBy?: GetOrdersOrderByEnum, orderType?: GetOrdersOrderTypeEnum, xLang?: GetOrdersXLangEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListOrderResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrders(page, pageSize, orderId, userId, productId, trackingCode, paymentMethod, paymentStatus, orderStatus, orderBy, orderType, xLang, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrdersManagementApi.getOrders']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Update order status
         * @param {string} id A valid mongodb id
         * @param {UpdateOrderStatusDTO} updateOrderStatusDTO 
         * @param {UpdateOrderStatusXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrderStatus(id: string, updateOrderStatusDTO: UpdateOrderStatusDTO, xLang?: UpdateOrderStatusXLangEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderSchemaDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOrderStatus(id, updateOrderStatusDTO, xLang, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrdersManagementApi.updateOrderStatus']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * OrdersManagementApi - factory interface
 * @export
 */
export const OrdersManagementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrdersManagementApiFp(configuration)
    return {
        /**
         * 
         * @summary Get order by id
         * @param {OrdersManagementApiGetOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder(requestParameters: OrdersManagementApiGetOrderRequest, options?: AxiosRequestConfig): AxiosPromise<GetOrderByIdResponseDTO> {
            return localVarFp.getOrder(requestParameters.id, requestParameters.xLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get orders
         * @param {OrdersManagementApiGetOrdersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrders(requestParameters: OrdersManagementApiGetOrdersRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ListOrderResponseDTO> {
            return localVarFp.getOrders(requestParameters.page, requestParameters.pageSize, requestParameters.orderId, requestParameters.userId, requestParameters.productId, requestParameters.trackingCode, requestParameters.paymentMethod, requestParameters.paymentStatus, requestParameters.orderStatus, requestParameters.orderBy, requestParameters.orderType, requestParameters.xLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update order status
         * @param {OrdersManagementApiUpdateOrderStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrderStatus(requestParameters: OrdersManagementApiUpdateOrderStatusRequest, options?: AxiosRequestConfig): AxiosPromise<OrderSchemaDTO> {
            return localVarFp.updateOrderStatus(requestParameters.id, requestParameters.updateOrderStatusDTO, requestParameters.xLang, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getOrder operation in OrdersManagementApi.
 * @export
 * @interface OrdersManagementApiGetOrderRequest
 */
export interface OrdersManagementApiGetOrderRequest {
    /**
     * A valid mongodb id
     * @type {string}
     * @memberof OrdersManagementApiGetOrder
     */
    readonly id: string

    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof OrdersManagementApiGetOrder
     */
    readonly xLang?: GetOrderXLangEnum
}

/**
 * Request parameters for getOrders operation in OrdersManagementApi.
 * @export
 * @interface OrdersManagementApiGetOrdersRequest
 */
export interface OrdersManagementApiGetOrdersRequest {
    /**
     * Page number
     * @type {number}
     * @memberof OrdersManagementApiGetOrders
     */
    readonly page?: number

    /**
     * Number of items per page
     * @type {number}
     * @memberof OrdersManagementApiGetOrders
     */
    readonly pageSize?: number

    /**
     * Order ID to filter orders by order
     * @type {string}
     * @memberof OrdersManagementApiGetOrders
     */
    readonly orderId?: string

    /**
     * User ID to filter orders by user
     * @type {string}
     * @memberof OrdersManagementApiGetOrders
     */
    readonly userId?: string

    /**
     * Product ID to filter orders by product
     * @type {string}
     * @memberof OrdersManagementApiGetOrders
     */
    readonly productId?: string

    /**
     * Tracking code to filter orders by tracking code
     * @type {string}
     * @memberof OrdersManagementApiGetOrders
     */
    readonly trackingCode?: string

    /**
     * Payment method to filter orders by payment method
     * @type {'all' | 'COD' | 'VNPAY' | 'ATM' | 'VISA' | 'MASTERCARD' | 'JCB'}
     * @memberof OrdersManagementApiGetOrders
     */
    readonly paymentMethod?: GetOrdersPaymentMethodEnum

    /**
     * Payment status to filter orders by payment status
     * @type {'all' | 'pending' | 'cancelled' | 'processing' | 'wait_for_payment' | 'completed' | 'refunded'}
     * @memberof OrdersManagementApiGetOrders
     */
    readonly paymentStatus?: GetOrdersPaymentStatusEnum

    /**
     * Order status to filter orders by order status
     * @type {'all' | 'pending' | 'cancelled' | 'processing' | 'shipping' | 'completed' | 'refunded'}
     * @memberof OrdersManagementApiGetOrders
     */
    readonly orderStatus?: GetOrdersOrderStatusEnum

    /**
     * Order by to filter orders by order by
     * @type {'createdAt' | 'updatedAt'}
     * @memberof OrdersManagementApiGetOrders
     */
    readonly orderBy?: GetOrdersOrderByEnum

    /**
     * Order type to filter orders by order type
     * @type {'newest' | 'oldest'}
     * @memberof OrdersManagementApiGetOrders
     */
    readonly orderType?: GetOrdersOrderTypeEnum

    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof OrdersManagementApiGetOrders
     */
    readonly xLang?: GetOrdersXLangEnum
}

/**
 * Request parameters for updateOrderStatus operation in OrdersManagementApi.
 * @export
 * @interface OrdersManagementApiUpdateOrderStatusRequest
 */
export interface OrdersManagementApiUpdateOrderStatusRequest {
    /**
     * A valid mongodb id
     * @type {string}
     * @memberof OrdersManagementApiUpdateOrderStatus
     */
    readonly id: string

    /**
     * 
     * @type {UpdateOrderStatusDTO}
     * @memberof OrdersManagementApiUpdateOrderStatus
     */
    readonly updateOrderStatusDTO: UpdateOrderStatusDTO

    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof OrdersManagementApiUpdateOrderStatus
     */
    readonly xLang?: UpdateOrderStatusXLangEnum
}

/**
 * OrdersManagementApi - object-oriented interface
 * @export
 * @class OrdersManagementApi
 * @extends {BaseAPI}
 */
export class OrdersManagementApi extends BaseAPI {
    /**
     * 
     * @summary Get order by id
     * @param {OrdersManagementApiGetOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersManagementApi
     */
    public getOrder(requestParameters: OrdersManagementApiGetOrderRequest, options?: AxiosRequestConfig) {
        return OrdersManagementApiFp(this.configuration).getOrder(requestParameters.id, requestParameters.xLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get orders
     * @param {OrdersManagementApiGetOrdersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersManagementApi
     */
    public getOrders(requestParameters: OrdersManagementApiGetOrdersRequest = {}, options?: AxiosRequestConfig) {
        return OrdersManagementApiFp(this.configuration).getOrders(requestParameters.page, requestParameters.pageSize, requestParameters.orderId, requestParameters.userId, requestParameters.productId, requestParameters.trackingCode, requestParameters.paymentMethod, requestParameters.paymentStatus, requestParameters.orderStatus, requestParameters.orderBy, requestParameters.orderType, requestParameters.xLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update order status
     * @param {OrdersManagementApiUpdateOrderStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersManagementApi
     */
    public updateOrderStatus(requestParameters: OrdersManagementApiUpdateOrderStatusRequest, options?: AxiosRequestConfig) {
        return OrdersManagementApiFp(this.configuration).updateOrderStatus(requestParameters.id, requestParameters.updateOrderStatusDTO, requestParameters.xLang, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
  * @export
  * @enum {string}
  */
export enum GetOrderXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
/**
  * @export
  * @enum {string}
  */
export enum GetOrdersPaymentMethodEnum {
    All = 'all',
    Cod = 'COD',
    Vnpay = 'VNPAY',
    Atm = 'ATM',
    Visa = 'VISA',
    Mastercard = 'MASTERCARD',
    Jcb = 'JCB'
}
/**
  * @export
  * @enum {string}
  */
export enum GetOrdersPaymentStatusEnum {
    All = 'all',
    Pending = 'pending',
    Cancelled = 'cancelled',
    Processing = 'processing',
    WaitForPayment = 'wait_for_payment',
    Completed = 'completed',
    Refunded = 'refunded'
}
/**
  * @export
  * @enum {string}
  */
export enum GetOrdersOrderStatusEnum {
    All = 'all',
    Pending = 'pending',
    Cancelled = 'cancelled',
    Processing = 'processing',
    Shipping = 'shipping',
    Completed = 'completed',
    Refunded = 'refunded'
}
/**
  * @export
  * @enum {string}
  */
export enum GetOrdersOrderByEnum {
    CreatedAt = 'createdAt',
    UpdatedAt = 'updatedAt'
}
/**
  * @export
  * @enum {string}
  */
export enum GetOrdersOrderTypeEnum {
    Newest = 'newest',
    Oldest = 'oldest'
}
/**
  * @export
  * @enum {string}
  */
export enum GetOrdersXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
/**
  * @export
  * @enum {string}
  */
export enum UpdateOrderStatusXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
