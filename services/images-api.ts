/* tslint:disable */
/* eslint-disable */
/**
 * TechCell RESTful API Documentations
 * This is the documentation for the TechCell RESTful API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: teams@techcell.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { ImageUploadedResponseDTO } from '../models';
/**
 * ImagesApi - axios parameter creator
 * @export
 */
export const ImagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get image by public id
         * @param {string} publicId Image public id
         * @param {GetImageByPublicIdXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImageByPublicId: async (publicId: string, xLang?: GetImageByPublicIdXLangEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'publicId' is not null or undefined
            assertParamExists('getImageByPublicId', 'publicId', publicId)
            const localVarPath = `/images/{publicId}`
                .replace(`{${"publicId"}}`, encodeURIComponent(String(publicId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload array of image
         * @param {UploadArrayImagesXLangEnum} [xLang] The language of the response
         * @param {Array<File>} [images] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadArrayImages: async (xLang?: UploadArrayImagesXLangEnum, images?: Array<File>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/images/array`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }

            if (images) {
                images.forEach((element) => {
                    localVarFormParams.append('images', element as any);
                })
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload image
         * @param {UploadSingleImageXLangEnum} [xLang] The language of the response
         * @param {File} [image] Maximum image size is 10 MB (10485760 bytes)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadSingleImage: async (xLang?: UploadSingleImageXLangEnum, image?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/images`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }


            if (image !== undefined) { 
                localVarFormParams.append('image', image as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ImagesApi - functional programming interface
 * @export
 */
export const ImagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ImagesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get image by public id
         * @param {string} publicId Image public id
         * @param {GetImageByPublicIdXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getImageByPublicId(publicId: string, xLang?: GetImageByPublicIdXLangEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageUploadedResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageByPublicId(publicId, xLang, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ImagesApi.getImageByPublicId']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Upload array of image
         * @param {UploadArrayImagesXLangEnum} [xLang] The language of the response
         * @param {Array<File>} [images] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadArrayImages(xLang?: UploadArrayImagesXLangEnum, images?: Array<File>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ImageUploadedResponseDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadArrayImages(xLang, images, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ImagesApi.uploadArrayImages']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Upload image
         * @param {UploadSingleImageXLangEnum} [xLang] The language of the response
         * @param {File} [image] Maximum image size is 10 MB (10485760 bytes)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadSingleImage(xLang?: UploadSingleImageXLangEnum, image?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageUploadedResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadSingleImage(xLang, image, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ImagesApi.uploadSingleImage']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ImagesApi - factory interface
 * @export
 */
export const ImagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ImagesApiFp(configuration)
    return {
        /**
         * 
         * @summary Get image by public id
         * @param {ImagesApiGetImageByPublicIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImageByPublicId(requestParameters: ImagesApiGetImageByPublicIdRequest, options?: AxiosRequestConfig): AxiosPromise<ImageUploadedResponseDTO> {
            return localVarFp.getImageByPublicId(requestParameters.publicId, requestParameters.xLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload array of image
         * @param {ImagesApiUploadArrayImagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadArrayImages(requestParameters: ImagesApiUploadArrayImagesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<ImageUploadedResponseDTO>> {
            return localVarFp.uploadArrayImages(requestParameters.xLang, requestParameters.images, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload image
         * @param {ImagesApiUploadSingleImageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadSingleImage(requestParameters: ImagesApiUploadSingleImageRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ImageUploadedResponseDTO> {
            return localVarFp.uploadSingleImage(requestParameters.xLang, requestParameters.image, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getImageByPublicId operation in ImagesApi.
 * @export
 * @interface ImagesApiGetImageByPublicIdRequest
 */
export interface ImagesApiGetImageByPublicIdRequest {
    /**
     * Image public id
     * @type {string}
     * @memberof ImagesApiGetImageByPublicId
     */
    readonly publicId: string

    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof ImagesApiGetImageByPublicId
     */
    readonly xLang?: GetImageByPublicIdXLangEnum
}

/**
 * Request parameters for uploadArrayImages operation in ImagesApi.
 * @export
 * @interface ImagesApiUploadArrayImagesRequest
 */
export interface ImagesApiUploadArrayImagesRequest {
    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof ImagesApiUploadArrayImages
     */
    readonly xLang?: UploadArrayImagesXLangEnum

    /**
     * 
     * @type {Array<File>}
     * @memberof ImagesApiUploadArrayImages
     */
    readonly images?: Array<File>
}

/**
 * Request parameters for uploadSingleImage operation in ImagesApi.
 * @export
 * @interface ImagesApiUploadSingleImageRequest
 */
export interface ImagesApiUploadSingleImageRequest {
    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof ImagesApiUploadSingleImage
     */
    readonly xLang?: UploadSingleImageXLangEnum

    /**
     * Maximum image size is 10 MB (10485760 bytes)
     * @type {File}
     * @memberof ImagesApiUploadSingleImage
     */
    readonly image?: File
}

/**
 * ImagesApi - object-oriented interface
 * @export
 * @class ImagesApi
 * @extends {BaseAPI}
 */
export class ImagesApi extends BaseAPI {
    /**
     * 
     * @summary Get image by public id
     * @param {ImagesApiGetImageByPublicIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApi
     */
    public getImageByPublicId(requestParameters: ImagesApiGetImageByPublicIdRequest, options?: AxiosRequestConfig) {
        return ImagesApiFp(this.configuration).getImageByPublicId(requestParameters.publicId, requestParameters.xLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload array of image
     * @param {ImagesApiUploadArrayImagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApi
     */
    public uploadArrayImages(requestParameters: ImagesApiUploadArrayImagesRequest = {}, options?: AxiosRequestConfig) {
        return ImagesApiFp(this.configuration).uploadArrayImages(requestParameters.xLang, requestParameters.images, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload image
     * @param {ImagesApiUploadSingleImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApi
     */
    public uploadSingleImage(requestParameters: ImagesApiUploadSingleImageRequest = {}, options?: AxiosRequestConfig) {
        return ImagesApiFp(this.configuration).uploadSingleImage(requestParameters.xLang, requestParameters.image, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
  * @export
  * @enum {string}
  */
export enum GetImageByPublicIdXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
/**
  * @export
  * @enum {string}
  */
export enum UploadArrayImagesXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
/**
  * @export
  * @enum {string}
  */
export enum UploadSingleImageXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
