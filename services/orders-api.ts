/* tslint:disable */
/* eslint-disable */
/**
 * TechCell RESTful API Documentations
 * This is the documentation for the TechCell RESTful API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: teams@techcell.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { CancelOrderRequestDTO } from '../models';
// @ts-ignore
import { CreateOrderRequestDTO } from '../models';
// @ts-ignore
import { ListUserOrderResponseDTO } from '../models';
// @ts-ignore
import { OrderSchemaDTO } from '../models';
// @ts-ignore
import { ReviewOrderRequestDTO } from '../models';
// @ts-ignore
import { ReviewedOrderResponseDTO } from '../models';
/**
 * OrdersApi - axios parameter creator
 * @export
 */
export const OrdersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Cancel user order
         * @param {string} id A valid mongodb id
         * @param {CancelOrderRequestDTO} cancelOrderRequestDTO 
         * @param {CancelOrderXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelOrder: async (id: string, cancelOrderRequestDTO: CancelOrderRequestDTO, xLang?: CancelOrderXLangEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cancelOrder', 'id', id)
            // verify required parameter 'cancelOrderRequestDTO' is not null or undefined
            assertParamExists('cancelOrder', 'cancelOrderRequestDTO', cancelOrderRequestDTO)
            const localVarPath = `/orders/{id}/cancel`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cancelOrderRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a order
         * @param {CreateOrderRequestDTO} createOrderRequestDTO 
         * @param {CreateOrderXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrder: async (createOrderRequestDTO: CreateOrderRequestDTO, xLang?: CreateOrderXLangEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createOrderRequestDTO' is not null or undefined
            assertParamExists('createOrder', 'createOrderRequestDTO', createOrderRequestDTO)
            const localVarPath = `/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createOrderRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get order with the newer payment url
         * @param {string} id A valid mongodb id
         * @param {string} [paymentReturnUrl] The return url after payment success
         * @param {GetPaymentUrlXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentUrl: async (id: string, paymentReturnUrl?: string, xLang?: GetPaymentUrlXLangEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPaymentUrl', 'id', id)
            const localVarPath = `/orders/{id}/payment-url`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (paymentReturnUrl !== undefined) {
                localVarQueryParameter['paymentReturnUrl'] = paymentReturnUrl;
            }

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user\'s order by id
         * @param {string} id A valid mongodb id
         * @param {GetUserOrderIdXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserOrderId: async (id: string, xLang?: GetUserOrderIdXLangEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserOrderId', 'id', id)
            const localVarPath = `/orders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get order\'s user
         * @param {number} [page] Page number
         * @param {number} [pageSize] Number of items per page
         * @param {GetUserOrdersPaymentMethodEnum} [paymentMethod] Payment method
         * @param {GetUserOrdersPaymentStatusEnum} [paymentStatus] Payment status
         * @param {GetUserOrdersOrderStatusEnum} [orderStatus] Order status
         * @param {GetUserOrdersXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserOrders: async (page?: number, pageSize?: number, paymentMethod?: GetUserOrdersPaymentMethodEnum, paymentStatus?: GetUserOrdersPaymentStatusEnum, orderStatus?: GetUserOrdersOrderStatusEnum, xLang?: GetUserOrdersXLangEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paymentMethod !== undefined) {
                localVarQueryParameter['paymentMethod'] = paymentMethod;
            }

            if (paymentStatus !== undefined) {
                localVarQueryParameter['paymentStatus'] = paymentStatus;
            }

            if (orderStatus !== undefined) {
                localVarQueryParameter['orderStatus'] = orderStatus;
            }

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Review a order
         * @param {ReviewOrderRequestDTO} reviewOrderRequestDTO 
         * @param {ReviewOrderXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reviewOrder: async (reviewOrderRequestDTO: ReviewOrderRequestDTO, xLang?: ReviewOrderXLangEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reviewOrderRequestDTO' is not null or undefined
            assertParamExists('reviewOrder', 'reviewOrderRequestDTO', reviewOrderRequestDTO)
            const localVarPath = `/orders/review`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reviewOrderRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrdersApi - functional programming interface
 * @export
 */
export const OrdersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrdersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Cancel user order
         * @param {string} id A valid mongodb id
         * @param {CancelOrderRequestDTO} cancelOrderRequestDTO 
         * @param {CancelOrderXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelOrder(id: string, cancelOrderRequestDTO: CancelOrderRequestDTO, xLang?: CancelOrderXLangEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelOrder(id, cancelOrderRequestDTO, xLang, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrdersApi.cancelOrder']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Create a order
         * @param {CreateOrderRequestDTO} createOrderRequestDTO 
         * @param {CreateOrderXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrder(createOrderRequestDTO: CreateOrderRequestDTO, xLang?: CreateOrderXLangEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderSchemaDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOrder(createOrderRequestDTO, xLang, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrdersApi.createOrder']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get order with the newer payment url
         * @param {string} id A valid mongodb id
         * @param {string} [paymentReturnUrl] The return url after payment success
         * @param {GetPaymentUrlXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPaymentUrl(id: string, paymentReturnUrl?: string, xLang?: GetPaymentUrlXLangEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderSchemaDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPaymentUrl(id, paymentReturnUrl, xLang, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrdersApi.getPaymentUrl']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get user\'s order by id
         * @param {string} id A valid mongodb id
         * @param {GetUserOrderIdXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserOrderId(id: string, xLang?: GetUserOrderIdXLangEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderSchemaDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserOrderId(id, xLang, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrdersApi.getUserOrderId']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get order\'s user
         * @param {number} [page] Page number
         * @param {number} [pageSize] Number of items per page
         * @param {GetUserOrdersPaymentMethodEnum} [paymentMethod] Payment method
         * @param {GetUserOrdersPaymentStatusEnum} [paymentStatus] Payment status
         * @param {GetUserOrdersOrderStatusEnum} [orderStatus] Order status
         * @param {GetUserOrdersXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserOrders(page?: number, pageSize?: number, paymentMethod?: GetUserOrdersPaymentMethodEnum, paymentStatus?: GetUserOrdersPaymentStatusEnum, orderStatus?: GetUserOrdersOrderStatusEnum, xLang?: GetUserOrdersXLangEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListUserOrderResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserOrders(page, pageSize, paymentMethod, paymentStatus, orderStatus, xLang, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrdersApi.getUserOrders']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Review a order
         * @param {ReviewOrderRequestDTO} reviewOrderRequestDTO 
         * @param {ReviewOrderXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reviewOrder(reviewOrderRequestDTO: ReviewOrderRequestDTO, xLang?: ReviewOrderXLangEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReviewedOrderResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reviewOrder(reviewOrderRequestDTO, xLang, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrdersApi.reviewOrder']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * OrdersApi - factory interface
 * @export
 */
export const OrdersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrdersApiFp(configuration)
    return {
        /**
         * 
         * @summary Cancel user order
         * @param {OrdersApiCancelOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelOrder(requestParameters: OrdersApiCancelOrderRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cancelOrder(requestParameters.id, requestParameters.cancelOrderRequestDTO, requestParameters.xLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a order
         * @param {OrdersApiCreateOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrder(requestParameters: OrdersApiCreateOrderRequest, options?: AxiosRequestConfig): AxiosPromise<OrderSchemaDTO> {
            return localVarFp.createOrder(requestParameters.createOrderRequestDTO, requestParameters.xLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get order with the newer payment url
         * @param {OrdersApiGetPaymentUrlRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentUrl(requestParameters: OrdersApiGetPaymentUrlRequest, options?: AxiosRequestConfig): AxiosPromise<OrderSchemaDTO> {
            return localVarFp.getPaymentUrl(requestParameters.id, requestParameters.paymentReturnUrl, requestParameters.xLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get user\'s order by id
         * @param {OrdersApiGetUserOrderIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserOrderId(requestParameters: OrdersApiGetUserOrderIdRequest, options?: AxiosRequestConfig): AxiosPromise<OrderSchemaDTO> {
            return localVarFp.getUserOrderId(requestParameters.id, requestParameters.xLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get order\'s user
         * @param {OrdersApiGetUserOrdersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserOrders(requestParameters: OrdersApiGetUserOrdersRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ListUserOrderResponseDTO> {
            return localVarFp.getUserOrders(requestParameters.page, requestParameters.pageSize, requestParameters.paymentMethod, requestParameters.paymentStatus, requestParameters.orderStatus, requestParameters.xLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Review a order
         * @param {OrdersApiReviewOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reviewOrder(requestParameters: OrdersApiReviewOrderRequest, options?: AxiosRequestConfig): AxiosPromise<ReviewedOrderResponseDTO> {
            return localVarFp.reviewOrder(requestParameters.reviewOrderRequestDTO, requestParameters.xLang, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cancelOrder operation in OrdersApi.
 * @export
 * @interface OrdersApiCancelOrderRequest
 */
export interface OrdersApiCancelOrderRequest {
    /**
     * A valid mongodb id
     * @type {string}
     * @memberof OrdersApiCancelOrder
     */
    readonly id: string

    /**
     * 
     * @type {CancelOrderRequestDTO}
     * @memberof OrdersApiCancelOrder
     */
    readonly cancelOrderRequestDTO: CancelOrderRequestDTO

    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof OrdersApiCancelOrder
     */
    readonly xLang?: CancelOrderXLangEnum
}

/**
 * Request parameters for createOrder operation in OrdersApi.
 * @export
 * @interface OrdersApiCreateOrderRequest
 */
export interface OrdersApiCreateOrderRequest {
    /**
     * 
     * @type {CreateOrderRequestDTO}
     * @memberof OrdersApiCreateOrder
     */
    readonly createOrderRequestDTO: CreateOrderRequestDTO

    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof OrdersApiCreateOrder
     */
    readonly xLang?: CreateOrderXLangEnum
}

/**
 * Request parameters for getPaymentUrl operation in OrdersApi.
 * @export
 * @interface OrdersApiGetPaymentUrlRequest
 */
export interface OrdersApiGetPaymentUrlRequest {
    /**
     * A valid mongodb id
     * @type {string}
     * @memberof OrdersApiGetPaymentUrl
     */
    readonly id: string

    /**
     * The return url after payment success
     * @type {string}
     * @memberof OrdersApiGetPaymentUrl
     */
    readonly paymentReturnUrl?: string

    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof OrdersApiGetPaymentUrl
     */
    readonly xLang?: GetPaymentUrlXLangEnum
}

/**
 * Request parameters for getUserOrderId operation in OrdersApi.
 * @export
 * @interface OrdersApiGetUserOrderIdRequest
 */
export interface OrdersApiGetUserOrderIdRequest {
    /**
     * A valid mongodb id
     * @type {string}
     * @memberof OrdersApiGetUserOrderId
     */
    readonly id: string

    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof OrdersApiGetUserOrderId
     */
    readonly xLang?: GetUserOrderIdXLangEnum
}

/**
 * Request parameters for getUserOrders operation in OrdersApi.
 * @export
 * @interface OrdersApiGetUserOrdersRequest
 */
export interface OrdersApiGetUserOrdersRequest {
    /**
     * Page number
     * @type {number}
     * @memberof OrdersApiGetUserOrders
     */
    readonly page?: number

    /**
     * Number of items per page
     * @type {number}
     * @memberof OrdersApiGetUserOrders
     */
    readonly pageSize?: number

    /**
     * Payment method
     * @type {'COD' | 'VNPAY' | 'ATM' | 'VISA' | 'MASTERCARD' | 'JCB'}
     * @memberof OrdersApiGetUserOrders
     */
    readonly paymentMethod?: GetUserOrdersPaymentMethodEnum

    /**
     * Payment status
     * @type {'pending' | 'cancelled' | 'processing' | 'wait_for_payment' | 'completed' | 'refunded'}
     * @memberof OrdersApiGetUserOrders
     */
    readonly paymentStatus?: GetUserOrdersPaymentStatusEnum

    /**
     * Order status
     * @type {'pending' | 'cancelled' | 'processing' | 'shipping' | 'completed' | 'refunded'}
     * @memberof OrdersApiGetUserOrders
     */
    readonly orderStatus?: GetUserOrdersOrderStatusEnum

    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof OrdersApiGetUserOrders
     */
    readonly xLang?: GetUserOrdersXLangEnum
}

/**
 * Request parameters for reviewOrder operation in OrdersApi.
 * @export
 * @interface OrdersApiReviewOrderRequest
 */
export interface OrdersApiReviewOrderRequest {
    /**
     * 
     * @type {ReviewOrderRequestDTO}
     * @memberof OrdersApiReviewOrder
     */
    readonly reviewOrderRequestDTO: ReviewOrderRequestDTO

    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof OrdersApiReviewOrder
     */
    readonly xLang?: ReviewOrderXLangEnum
}

/**
 * OrdersApi - object-oriented interface
 * @export
 * @class OrdersApi
 * @extends {BaseAPI}
 */
export class OrdersApi extends BaseAPI {
    /**
     * 
     * @summary Cancel user order
     * @param {OrdersApiCancelOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public cancelOrder(requestParameters: OrdersApiCancelOrderRequest, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).cancelOrder(requestParameters.id, requestParameters.cancelOrderRequestDTO, requestParameters.xLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a order
     * @param {OrdersApiCreateOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public createOrder(requestParameters: OrdersApiCreateOrderRequest, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).createOrder(requestParameters.createOrderRequestDTO, requestParameters.xLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get order with the newer payment url
     * @param {OrdersApiGetPaymentUrlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public getPaymentUrl(requestParameters: OrdersApiGetPaymentUrlRequest, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).getPaymentUrl(requestParameters.id, requestParameters.paymentReturnUrl, requestParameters.xLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get user\'s order by id
     * @param {OrdersApiGetUserOrderIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public getUserOrderId(requestParameters: OrdersApiGetUserOrderIdRequest, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).getUserOrderId(requestParameters.id, requestParameters.xLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get order\'s user
     * @param {OrdersApiGetUserOrdersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public getUserOrders(requestParameters: OrdersApiGetUserOrdersRequest = {}, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).getUserOrders(requestParameters.page, requestParameters.pageSize, requestParameters.paymentMethod, requestParameters.paymentStatus, requestParameters.orderStatus, requestParameters.xLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Review a order
     * @param {OrdersApiReviewOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public reviewOrder(requestParameters: OrdersApiReviewOrderRequest, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).reviewOrder(requestParameters.reviewOrderRequestDTO, requestParameters.xLang, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
  * @export
  * @enum {string}
  */
export enum CancelOrderXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
/**
  * @export
  * @enum {string}
  */
export enum CreateOrderXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
/**
  * @export
  * @enum {string}
  */
export enum GetPaymentUrlXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
/**
  * @export
  * @enum {string}
  */
export enum GetUserOrderIdXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
/**
  * @export
  * @enum {string}
  */
export enum GetUserOrdersPaymentMethodEnum {
    Cod = 'COD',
    Vnpay = 'VNPAY',
    Atm = 'ATM',
    Visa = 'VISA',
    Mastercard = 'MASTERCARD',
    Jcb = 'JCB'
}
/**
  * @export
  * @enum {string}
  */
export enum GetUserOrdersPaymentStatusEnum {
    Pending = 'pending',
    Cancelled = 'cancelled',
    Processing = 'processing',
    WaitForPayment = 'wait_for_payment',
    Completed = 'completed',
    Refunded = 'refunded'
}
/**
  * @export
  * @enum {string}
  */
export enum GetUserOrdersOrderStatusEnum {
    Pending = 'pending',
    Cancelled = 'cancelled',
    Processing = 'processing',
    Shipping = 'shipping',
    Completed = 'completed',
    Refunded = 'refunded'
}
/**
  * @export
  * @enum {string}
  */
export enum GetUserOrdersXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
/**
  * @export
  * @enum {string}
  */
export enum ReviewOrderXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
