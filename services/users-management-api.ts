/* tslint:disable */
/* eslint-disable */
/**
 * TechCell RESTful API Documentations
 * This is the documentation for the TechCell RESTful API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: teams@techcell.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { BlockUnblockRequestDTO } from '../models';
// @ts-ignore
import { CreateUserRequestDto } from '../models';
// @ts-ignore
import { ListUserResponseDTO } from '../models';
// @ts-ignore
import { UserMntResponseDTO } from '../models';
/**
 * UsersManagementApi - axios parameter creator
 * @export
 */
export const UsersManagementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Block user
         * @summary Block user
         * @param {string} id 
         * @param {BlockUnblockRequestDTO} blockUnblockRequestDTO 
         * @param {BlockUserXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blockUser: async (id: string, blockUnblockRequestDTO: BlockUnblockRequestDTO, xLang?: BlockUserXLangEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('blockUser', 'id', id)
            // verify required parameter 'blockUnblockRequestDTO' is not null or undefined
            assertParamExists('blockUser', 'blockUnblockRequestDTO', blockUnblockRequestDTO)
            const localVarPath = `/users/{id}/block`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(blockUnblockRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create new user
         * @summary Create new user
         * @param {CreateUserRequestDto} createUserRequestDto 
         * @param {CreateUserXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (createUserRequestDto: CreateUserRequestDto, xLang?: CreateUserXLangEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUserRequestDto' is not null or undefined
            assertParamExists('createUser', 'createUserRequestDto', createUserRequestDto)
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get user by id
         * @summary Get user by id
         * @param {string} id 
         * @param {GetUserByIdXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById: async (id: string, xLang?: GetUserByIdXLangEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserById', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get list of users
         * @summary Get list of users
         * @param {number} [page] Page of users to be returned
         * @param {number} [pageSize] Size of page for users to be returned
         * @param {GetUsersOrderFieldEnum} [orderField] Order of users to be returned
         * @param {GetUsersSortOrderEnum} [sortOrder] Sort of users to be returned
         * @param {string} [keyword] Search key of users to be returned
         * @param {GetUsersStatusEnum} [status] Status of users to be returned
         * @param {GetUsersRoleEnum} [role] Role of users to be returned
         * @param {GetUsersEmailVerifiedEnum} [emailVerified] User with email verified
         * @param {GetUsersXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (page?: number, pageSize?: number, orderField?: GetUsersOrderFieldEnum, sortOrder?: GetUsersSortOrderEnum, keyword?: string, status?: GetUsersStatusEnum, role?: GetUsersRoleEnum, emailVerified?: GetUsersEmailVerifiedEnum, xLang?: GetUsersXLangEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (orderField !== undefined) {
                localVarQueryParameter['order_field'] = orderField;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sort_order'] = sortOrder;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (role !== undefined) {
                localVarQueryParameter['role'] = role;
            }

            if (emailVerified !== undefined) {
                localVarQueryParameter['emailVerified'] = emailVerified;
            }

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Unblock user
         * @summary Unblock user
         * @param {string} id 
         * @param {BlockUnblockRequestDTO} blockUnblockRequestDTO 
         * @param {UnblockUserXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unblockUser: async (id: string, blockUnblockRequestDTO: BlockUnblockRequestDTO, xLang?: UnblockUserXLangEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('unblockUser', 'id', id)
            // verify required parameter 'blockUnblockRequestDTO' is not null or undefined
            assertParamExists('unblockUser', 'blockUnblockRequestDTO', blockUnblockRequestDTO)
            const localVarPath = `/users/{id}/unblock`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(blockUnblockRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersManagementApi - functional programming interface
 * @export
 */
export const UsersManagementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersManagementApiAxiosParamCreator(configuration)
    return {
        /**
         * Block user
         * @summary Block user
         * @param {string} id 
         * @param {BlockUnblockRequestDTO} blockUnblockRequestDTO 
         * @param {BlockUserXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blockUser(id: string, blockUnblockRequestDTO: BlockUnblockRequestDTO, xLang?: BlockUserXLangEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserMntResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blockUser(id, blockUnblockRequestDTO, xLang, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UsersManagementApi.blockUser']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Create new user
         * @summary Create new user
         * @param {CreateUserRequestDto} createUserRequestDto 
         * @param {CreateUserXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(createUserRequestDto: CreateUserRequestDto, xLang?: CreateUserXLangEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserMntResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(createUserRequestDto, xLang, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UsersManagementApi.createUser']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get user by id
         * @summary Get user by id
         * @param {string} id 
         * @param {GetUserByIdXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserById(id: string, xLang?: GetUserByIdXLangEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserMntResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserById(id, xLang, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UsersManagementApi.getUserById']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get list of users
         * @summary Get list of users
         * @param {number} [page] Page of users to be returned
         * @param {number} [pageSize] Size of page for users to be returned
         * @param {GetUsersOrderFieldEnum} [orderField] Order of users to be returned
         * @param {GetUsersSortOrderEnum} [sortOrder] Sort of users to be returned
         * @param {string} [keyword] Search key of users to be returned
         * @param {GetUsersStatusEnum} [status] Status of users to be returned
         * @param {GetUsersRoleEnum} [role] Role of users to be returned
         * @param {GetUsersEmailVerifiedEnum} [emailVerified] User with email verified
         * @param {GetUsersXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(page?: number, pageSize?: number, orderField?: GetUsersOrderFieldEnum, sortOrder?: GetUsersSortOrderEnum, keyword?: string, status?: GetUsersStatusEnum, role?: GetUsersRoleEnum, emailVerified?: GetUsersEmailVerifiedEnum, xLang?: GetUsersXLangEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListUserResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(page, pageSize, orderField, sortOrder, keyword, status, role, emailVerified, xLang, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UsersManagementApi.getUsers']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Unblock user
         * @summary Unblock user
         * @param {string} id 
         * @param {BlockUnblockRequestDTO} blockUnblockRequestDTO 
         * @param {UnblockUserXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unblockUser(id: string, blockUnblockRequestDTO: BlockUnblockRequestDTO, xLang?: UnblockUserXLangEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserMntResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unblockUser(id, blockUnblockRequestDTO, xLang, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UsersManagementApi.unblockUser']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * UsersManagementApi - factory interface
 * @export
 */
export const UsersManagementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersManagementApiFp(configuration)
    return {
        /**
         * Block user
         * @summary Block user
         * @param {UsersManagementApiBlockUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blockUser(requestParameters: UsersManagementApiBlockUserRequest, options?: AxiosRequestConfig): AxiosPromise<UserMntResponseDTO> {
            return localVarFp.blockUser(requestParameters.id, requestParameters.blockUnblockRequestDTO, requestParameters.xLang, options).then((request) => request(axios, basePath));
        },
        /**
         * Create new user
         * @summary Create new user
         * @param {UsersManagementApiCreateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(requestParameters: UsersManagementApiCreateUserRequest, options?: AxiosRequestConfig): AxiosPromise<UserMntResponseDTO> {
            return localVarFp.createUser(requestParameters.createUserRequestDto, requestParameters.xLang, options).then((request) => request(axios, basePath));
        },
        /**
         * Get user by id
         * @summary Get user by id
         * @param {UsersManagementApiGetUserByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById(requestParameters: UsersManagementApiGetUserByIdRequest, options?: AxiosRequestConfig): AxiosPromise<UserMntResponseDTO> {
            return localVarFp.getUserById(requestParameters.id, requestParameters.xLang, options).then((request) => request(axios, basePath));
        },
        /**
         * Get list of users
         * @summary Get list of users
         * @param {UsersManagementApiGetUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(requestParameters: UsersManagementApiGetUsersRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ListUserResponseDTO> {
            return localVarFp.getUsers(requestParameters.page, requestParameters.pageSize, requestParameters.orderField, requestParameters.sortOrder, requestParameters.keyword, requestParameters.status, requestParameters.role, requestParameters.emailVerified, requestParameters.xLang, options).then((request) => request(axios, basePath));
        },
        /**
         * Unblock user
         * @summary Unblock user
         * @param {UsersManagementApiUnblockUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unblockUser(requestParameters: UsersManagementApiUnblockUserRequest, options?: AxiosRequestConfig): AxiosPromise<UserMntResponseDTO> {
            return localVarFp.unblockUser(requestParameters.id, requestParameters.blockUnblockRequestDTO, requestParameters.xLang, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for blockUser operation in UsersManagementApi.
 * @export
 * @interface UsersManagementApiBlockUserRequest
 */
export interface UsersManagementApiBlockUserRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersManagementApiBlockUser
     */
    readonly id: string

    /**
     * 
     * @type {BlockUnblockRequestDTO}
     * @memberof UsersManagementApiBlockUser
     */
    readonly blockUnblockRequestDTO: BlockUnblockRequestDTO

    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof UsersManagementApiBlockUser
     */
    readonly xLang?: BlockUserXLangEnum
}

/**
 * Request parameters for createUser operation in UsersManagementApi.
 * @export
 * @interface UsersManagementApiCreateUserRequest
 */
export interface UsersManagementApiCreateUserRequest {
    /**
     * 
     * @type {CreateUserRequestDto}
     * @memberof UsersManagementApiCreateUser
     */
    readonly createUserRequestDto: CreateUserRequestDto

    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof UsersManagementApiCreateUser
     */
    readonly xLang?: CreateUserXLangEnum
}

/**
 * Request parameters for getUserById operation in UsersManagementApi.
 * @export
 * @interface UsersManagementApiGetUserByIdRequest
 */
export interface UsersManagementApiGetUserByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersManagementApiGetUserById
     */
    readonly id: string

    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof UsersManagementApiGetUserById
     */
    readonly xLang?: GetUserByIdXLangEnum
}

/**
 * Request parameters for getUsers operation in UsersManagementApi.
 * @export
 * @interface UsersManagementApiGetUsersRequest
 */
export interface UsersManagementApiGetUsersRequest {
    /**
     * Page of users to be returned
     * @type {number}
     * @memberof UsersManagementApiGetUsers
     */
    readonly page?: number

    /**
     * Size of page for users to be returned
     * @type {number}
     * @memberof UsersManagementApiGetUsers
     */
    readonly pageSize?: number

    /**
     * Order of users to be returned
     * @type {'email' | 'userName' | 'firstName' | 'lastName' | 'createdAt' | 'updatedAt'}
     * @memberof UsersManagementApiGetUsers
     */
    readonly orderField?: GetUsersOrderFieldEnum

    /**
     * Sort of users to be returned
     * @type {'ascending' | 'descending'}
     * @memberof UsersManagementApiGetUsers
     */
    readonly sortOrder?: GetUsersSortOrderEnum

    /**
     * Search key of users to be returned
     * @type {string}
     * @memberof UsersManagementApiGetUsers
     */
    readonly keyword?: string

    /**
     * Status of users to be returned
     * @type {'blocked' | 'unblocked' | 'all'}
     * @memberof UsersManagementApiGetUsers
     */
    readonly status?: GetUsersStatusEnum

    /**
     * Role of users to be returned
     * @type {'Manager' | 'Staff' | 'User' | 'all_role'}
     * @memberof UsersManagementApiGetUsers
     */
    readonly role?: GetUsersRoleEnum

    /**
     * User with email verified
     * @type {'verified' | 'unverified' | 'all'}
     * @memberof UsersManagementApiGetUsers
     */
    readonly emailVerified?: GetUsersEmailVerifiedEnum

    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof UsersManagementApiGetUsers
     */
    readonly xLang?: GetUsersXLangEnum
}

/**
 * Request parameters for unblockUser operation in UsersManagementApi.
 * @export
 * @interface UsersManagementApiUnblockUserRequest
 */
export interface UsersManagementApiUnblockUserRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersManagementApiUnblockUser
     */
    readonly id: string

    /**
     * 
     * @type {BlockUnblockRequestDTO}
     * @memberof UsersManagementApiUnblockUser
     */
    readonly blockUnblockRequestDTO: BlockUnblockRequestDTO

    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof UsersManagementApiUnblockUser
     */
    readonly xLang?: UnblockUserXLangEnum
}

/**
 * UsersManagementApi - object-oriented interface
 * @export
 * @class UsersManagementApi
 * @extends {BaseAPI}
 */
export class UsersManagementApi extends BaseAPI {
    /**
     * Block user
     * @summary Block user
     * @param {UsersManagementApiBlockUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersManagementApi
     */
    public blockUser(requestParameters: UsersManagementApiBlockUserRequest, options?: AxiosRequestConfig) {
        return UsersManagementApiFp(this.configuration).blockUser(requestParameters.id, requestParameters.blockUnblockRequestDTO, requestParameters.xLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create new user
     * @summary Create new user
     * @param {UsersManagementApiCreateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersManagementApi
     */
    public createUser(requestParameters: UsersManagementApiCreateUserRequest, options?: AxiosRequestConfig) {
        return UsersManagementApiFp(this.configuration).createUser(requestParameters.createUserRequestDto, requestParameters.xLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get user by id
     * @summary Get user by id
     * @param {UsersManagementApiGetUserByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersManagementApi
     */
    public getUserById(requestParameters: UsersManagementApiGetUserByIdRequest, options?: AxiosRequestConfig) {
        return UsersManagementApiFp(this.configuration).getUserById(requestParameters.id, requestParameters.xLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get list of users
     * @summary Get list of users
     * @param {UsersManagementApiGetUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersManagementApi
     */
    public getUsers(requestParameters: UsersManagementApiGetUsersRequest = {}, options?: AxiosRequestConfig) {
        return UsersManagementApiFp(this.configuration).getUsers(requestParameters.page, requestParameters.pageSize, requestParameters.orderField, requestParameters.sortOrder, requestParameters.keyword, requestParameters.status, requestParameters.role, requestParameters.emailVerified, requestParameters.xLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Unblock user
     * @summary Unblock user
     * @param {UsersManagementApiUnblockUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersManagementApi
     */
    public unblockUser(requestParameters: UsersManagementApiUnblockUserRequest, options?: AxiosRequestConfig) {
        return UsersManagementApiFp(this.configuration).unblockUser(requestParameters.id, requestParameters.blockUnblockRequestDTO, requestParameters.xLang, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
  * @export
  * @enum {string}
  */
export enum BlockUserXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
/**
  * @export
  * @enum {string}
  */
export enum CreateUserXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
/**
  * @export
  * @enum {string}
  */
export enum GetUserByIdXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
/**
  * @export
  * @enum {string}
  */
export enum GetUsersOrderFieldEnum {
    Email = 'email',
    UserName = 'userName',
    FirstName = 'firstName',
    LastName = 'lastName',
    CreatedAt = 'createdAt',
    UpdatedAt = 'updatedAt'
}
/**
  * @export
  * @enum {string}
  */
export enum GetUsersSortOrderEnum {
    Ascending = 'ascending',
    Descending = 'descending'
}
/**
  * @export
  * @enum {string}
  */
export enum GetUsersStatusEnum {
    Blocked = 'blocked',
    Unblocked = 'unblocked',
    All = 'all'
}
/**
  * @export
  * @enum {string}
  */
export enum GetUsersRoleEnum {
    Manager = 'Manager',
    Staff = 'Staff',
    User = 'User',
    AllRole = 'all_role'
}
/**
  * @export
  * @enum {string}
  */
export enum GetUsersEmailVerifiedEnum {
    Verified = 'verified',
    Unverified = 'unverified',
    All = 'all'
}
/**
  * @export
  * @enum {string}
  */
export enum GetUsersXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
/**
  * @export
  * @enum {string}
  */
export enum UnblockUserXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
