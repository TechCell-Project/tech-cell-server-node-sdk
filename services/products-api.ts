/* tslint:disable */
/* eslint-disable */
/**
 * TechCell RESTful API Documentations
 * This is the documentation for the TechCell RESTful API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: teams@techcell.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { CreateProductRequestDTO } from '../models';
// @ts-ignore
import { ListProductResponseDTO } from '../models';
// @ts-ignore
import { ProductDTO } from '../models';
// @ts-ignore
import { UpdateProductRequestDTO } from '../models';
/**
 * ProductsApi - axios parameter creator
 * @export
 */
export const ProductsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new product
         * @param {CreateProductRequestDTO} createProductRequestDTO Create product request
         * @param {CreateProductXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProduct: async (createProductRequestDTO: CreateProductRequestDTO, xLang?: CreateProductXLangEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createProductRequestDTO' is not null or undefined
            assertParamExists('createProduct', 'createProductRequestDTO', createProductRequestDTO)
            const localVarPath = `/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProductRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete product by id
         * @param {string} productId A valid product id
         * @param {DeleteProductXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProduct: async (productId: string, xLang?: DeleteProductXLangEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('deleteProduct', 'productId', productId)
            const localVarPath = `/products/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete product variation
         * @param {string} productId A valid product id
         * @param {string} sku A valid product sku
         * @param {DeleteProductVariationXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductVariation: async (productId: string, sku: string, xLang?: DeleteProductVariationXLangEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('deleteProductVariation', 'productId', productId)
            // verify required parameter 'sku' is not null or undefined
            assertParamExists('deleteProductVariation', 'sku', sku)
            const localVarPath = `/products/{productId}/variation`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sku !== undefined) {
                localVarQueryParameter['sku'] = sku;
            }

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get product by id
         * @param {string} productId A valid product id
         * @param {boolean} [detail] Get detail of products
         * @param {GetProductByIdSelectTypeEnum} [selectType] Type of select
         * @param {GetProductByIdXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductById: async (productId: string, detail?: boolean, selectType?: GetProductByIdSelectTypeEnum, xLang?: GetProductByIdXLangEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('getProductById', 'productId', productId)
            const localVarPath = `/products/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (detail !== undefined) {
                localVarQueryParameter['detail'] = detail;
            }

            if (selectType !== undefined) {
                localVarQueryParameter['select_type'] = selectType;
            }

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get products list
         * @param {number} [page] Page of products to be returned
         * @param {number} [pageSize] Size of page for products to be returned
         * @param {boolean} [detail] Get detail of products
         * @param {GetProductsSelectTypeEnum} [selectType] Type of select
         * @param {string} [keyword] Keyword to search
         * @param {string} [category] Label or id of category to search
         * @param {GetProductsXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProducts: async (page?: number, pageSize?: number, detail?: boolean, selectType?: GetProductsSelectTypeEnum, keyword?: string, category?: string, xLang?: GetProductsXLangEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (detail !== undefined) {
                localVarQueryParameter['detail'] = detail;
            }

            if (selectType !== undefined) {
                localVarQueryParameter['select_type'] = selectType;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update product by id
         * @param {string} productId A valid product id
         * @param {UpdateProductRequestDTO} updateProductRequestDTO 
         * @param {UpdateProductXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProduct: async (productId: string, updateProductRequestDTO: UpdateProductRequestDTO, xLang?: UpdateProductXLangEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('updateProduct', 'productId', productId)
            // verify required parameter 'updateProductRequestDTO' is not null or undefined
            assertParamExists('updateProduct', 'updateProductRequestDTO', updateProductRequestDTO)
            const localVarPath = `/products/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProductRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsApi - functional programming interface
 * @export
 */
export const ProductsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new product
         * @param {CreateProductRequestDTO} createProductRequestDTO Create product request
         * @param {CreateProductXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProduct(createProductRequestDTO: CreateProductRequestDTO, xLang?: CreateProductXLangEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProduct(createProductRequestDTO, xLang, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductsApi.createProduct']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Delete product by id
         * @param {string} productId A valid product id
         * @param {DeleteProductXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProduct(productId: string, xLang?: DeleteProductXLangEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProduct(productId, xLang, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductsApi.deleteProduct']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Delete product variation
         * @param {string} productId A valid product id
         * @param {string} sku A valid product sku
         * @param {DeleteProductVariationXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProductVariation(productId: string, sku: string, xLang?: DeleteProductVariationXLangEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProductVariation(productId, sku, xLang, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductsApi.deleteProductVariation']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get product by id
         * @param {string} productId A valid product id
         * @param {boolean} [detail] Get detail of products
         * @param {GetProductByIdSelectTypeEnum} [selectType] Type of select
         * @param {GetProductByIdXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductById(productId: string, detail?: boolean, selectType?: GetProductByIdSelectTypeEnum, xLang?: GetProductByIdXLangEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductById(productId, detail, selectType, xLang, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductsApi.getProductById']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get products list
         * @param {number} [page] Page of products to be returned
         * @param {number} [pageSize] Size of page for products to be returned
         * @param {boolean} [detail] Get detail of products
         * @param {GetProductsSelectTypeEnum} [selectType] Type of select
         * @param {string} [keyword] Keyword to search
         * @param {string} [category] Label or id of category to search
         * @param {GetProductsXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProducts(page?: number, pageSize?: number, detail?: boolean, selectType?: GetProductsSelectTypeEnum, keyword?: string, category?: string, xLang?: GetProductsXLangEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListProductResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProducts(page, pageSize, detail, selectType, keyword, category, xLang, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductsApi.getProducts']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Update product by id
         * @param {string} productId A valid product id
         * @param {UpdateProductRequestDTO} updateProductRequestDTO 
         * @param {UpdateProductXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProduct(productId: string, updateProductRequestDTO: UpdateProductRequestDTO, xLang?: UpdateProductXLangEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProduct(productId, updateProductRequestDTO, xLang, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductsApi.updateProduct']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ProductsApi - factory interface
 * @export
 */
export const ProductsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new product
         * @param {ProductsApiCreateProductRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProduct(requestParameters: ProductsApiCreateProductRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createProduct(requestParameters.createProductRequestDTO, requestParameters.xLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete product by id
         * @param {ProductsApiDeleteProductRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProduct(requestParameters: ProductsApiDeleteProductRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteProduct(requestParameters.productId, requestParameters.xLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete product variation
         * @param {ProductsApiDeleteProductVariationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductVariation(requestParameters: ProductsApiDeleteProductVariationRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteProductVariation(requestParameters.productId, requestParameters.sku, requestParameters.xLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get product by id
         * @param {ProductsApiGetProductByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductById(requestParameters: ProductsApiGetProductByIdRequest, options?: AxiosRequestConfig): AxiosPromise<ProductDTO> {
            return localVarFp.getProductById(requestParameters.productId, requestParameters.detail, requestParameters.selectType, requestParameters.xLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get products list
         * @param {ProductsApiGetProductsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProducts(requestParameters: ProductsApiGetProductsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ListProductResponseDTO> {
            return localVarFp.getProducts(requestParameters.page, requestParameters.pageSize, requestParameters.detail, requestParameters.selectType, requestParameters.keyword, requestParameters.category, requestParameters.xLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update product by id
         * @param {ProductsApiUpdateProductRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProduct(requestParameters: ProductsApiUpdateProductRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateProduct(requestParameters.productId, requestParameters.updateProductRequestDTO, requestParameters.xLang, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createProduct operation in ProductsApi.
 * @export
 * @interface ProductsApiCreateProductRequest
 */
export interface ProductsApiCreateProductRequest {
    /**
     * Create product request
     * @type {CreateProductRequestDTO}
     * @memberof ProductsApiCreateProduct
     */
    readonly createProductRequestDTO: CreateProductRequestDTO

    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof ProductsApiCreateProduct
     */
    readonly xLang?: CreateProductXLangEnum
}

/**
 * Request parameters for deleteProduct operation in ProductsApi.
 * @export
 * @interface ProductsApiDeleteProductRequest
 */
export interface ProductsApiDeleteProductRequest {
    /**
     * A valid product id
     * @type {string}
     * @memberof ProductsApiDeleteProduct
     */
    readonly productId: string

    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof ProductsApiDeleteProduct
     */
    readonly xLang?: DeleteProductXLangEnum
}

/**
 * Request parameters for deleteProductVariation operation in ProductsApi.
 * @export
 * @interface ProductsApiDeleteProductVariationRequest
 */
export interface ProductsApiDeleteProductVariationRequest {
    /**
     * A valid product id
     * @type {string}
     * @memberof ProductsApiDeleteProductVariation
     */
    readonly productId: string

    /**
     * A valid product sku
     * @type {string}
     * @memberof ProductsApiDeleteProductVariation
     */
    readonly sku: string

    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof ProductsApiDeleteProductVariation
     */
    readonly xLang?: DeleteProductVariationXLangEnum
}

/**
 * Request parameters for getProductById operation in ProductsApi.
 * @export
 * @interface ProductsApiGetProductByIdRequest
 */
export interface ProductsApiGetProductByIdRequest {
    /**
     * A valid product id
     * @type {string}
     * @memberof ProductsApiGetProductById
     */
    readonly productId: string

    /**
     * Get detail of products
     * @type {boolean}
     * @memberof ProductsApiGetProductById
     */
    readonly detail?: boolean

    /**
     * Type of select
     * @type {'only_active' | 'only_deleted' | 'both_deleted_and_active'}
     * @memberof ProductsApiGetProductById
     */
    readonly selectType?: GetProductByIdSelectTypeEnum

    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof ProductsApiGetProductById
     */
    readonly xLang?: GetProductByIdXLangEnum
}

/**
 * Request parameters for getProducts operation in ProductsApi.
 * @export
 * @interface ProductsApiGetProductsRequest
 */
export interface ProductsApiGetProductsRequest {
    /**
     * Page of products to be returned
     * @type {number}
     * @memberof ProductsApiGetProducts
     */
    readonly page?: number

    /**
     * Size of page for products to be returned
     * @type {number}
     * @memberof ProductsApiGetProducts
     */
    readonly pageSize?: number

    /**
     * Get detail of products
     * @type {boolean}
     * @memberof ProductsApiGetProducts
     */
    readonly detail?: boolean

    /**
     * Type of select
     * @type {'only_active' | 'only_deleted' | 'both_deleted_and_active'}
     * @memberof ProductsApiGetProducts
     */
    readonly selectType?: GetProductsSelectTypeEnum

    /**
     * Keyword to search
     * @type {string}
     * @memberof ProductsApiGetProducts
     */
    readonly keyword?: string

    /**
     * Label or id of category to search
     * @type {string}
     * @memberof ProductsApiGetProducts
     */
    readonly category?: string

    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof ProductsApiGetProducts
     */
    readonly xLang?: GetProductsXLangEnum
}

/**
 * Request parameters for updateProduct operation in ProductsApi.
 * @export
 * @interface ProductsApiUpdateProductRequest
 */
export interface ProductsApiUpdateProductRequest {
    /**
     * A valid product id
     * @type {string}
     * @memberof ProductsApiUpdateProduct
     */
    readonly productId: string

    /**
     * 
     * @type {UpdateProductRequestDTO}
     * @memberof ProductsApiUpdateProduct
     */
    readonly updateProductRequestDTO: UpdateProductRequestDTO

    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof ProductsApiUpdateProduct
     */
    readonly xLang?: UpdateProductXLangEnum
}

/**
 * ProductsApi - object-oriented interface
 * @export
 * @class ProductsApi
 * @extends {BaseAPI}
 */
export class ProductsApi extends BaseAPI {
    /**
     * 
     * @summary Create a new product
     * @param {ProductsApiCreateProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public createProduct(requestParameters: ProductsApiCreateProductRequest, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).createProduct(requestParameters.createProductRequestDTO, requestParameters.xLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete product by id
     * @param {ProductsApiDeleteProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public deleteProduct(requestParameters: ProductsApiDeleteProductRequest, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).deleteProduct(requestParameters.productId, requestParameters.xLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete product variation
     * @param {ProductsApiDeleteProductVariationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public deleteProductVariation(requestParameters: ProductsApiDeleteProductVariationRequest, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).deleteProductVariation(requestParameters.productId, requestParameters.sku, requestParameters.xLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get product by id
     * @param {ProductsApiGetProductByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public getProductById(requestParameters: ProductsApiGetProductByIdRequest, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).getProductById(requestParameters.productId, requestParameters.detail, requestParameters.selectType, requestParameters.xLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get products list
     * @param {ProductsApiGetProductsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public getProducts(requestParameters: ProductsApiGetProductsRequest = {}, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).getProducts(requestParameters.page, requestParameters.pageSize, requestParameters.detail, requestParameters.selectType, requestParameters.keyword, requestParameters.category, requestParameters.xLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update product by id
     * @param {ProductsApiUpdateProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public updateProduct(requestParameters: ProductsApiUpdateProductRequest, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).updateProduct(requestParameters.productId, requestParameters.updateProductRequestDTO, requestParameters.xLang, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
  * @export
  * @enum {string}
  */
export enum CreateProductXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
/**
  * @export
  * @enum {string}
  */
export enum DeleteProductXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
/**
  * @export
  * @enum {string}
  */
export enum DeleteProductVariationXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
/**
  * @export
  * @enum {string}
  */
export enum GetProductByIdSelectTypeEnum {
    OnlyActive = 'only_active',
    OnlyDeleted = 'only_deleted',
    BothDeletedAndActive = 'both_deleted_and_active'
}
/**
  * @export
  * @enum {string}
  */
export enum GetProductByIdXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
/**
  * @export
  * @enum {string}
  */
export enum GetProductsSelectTypeEnum {
    OnlyActive = 'only_active',
    OnlyDeleted = 'only_deleted',
    BothDeletedAndActive = 'both_deleted_and_active'
}
/**
  * @export
  * @enum {string}
  */
export enum GetProductsXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
/**
  * @export
  * @enum {string}
  */
export enum UpdateProductXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
