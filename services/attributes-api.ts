/* tslint:disable */
/* eslint-disable */
/**
 * TechCell RESTful API Documentations
 * This is the documentation for the TechCell RESTful API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: teams@techcell.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { AttributeDTO } from '../models';
// @ts-ignore
import { CreateAttributeRequestDTO } from '../models';
// @ts-ignore
import { ListAttributeResponseDTO } from '../models';
// @ts-ignore
import { UpdateAttributeRequestDTO } from '../models';
/**
 * AttributesApi - axios parameter creator
 * @export
 */
export const AttributesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create attribute
         * @summary Create attribute
         * @param {CreateAttributeRequestDTO} createAttributeRequestDTO 
         * @param {CreateAttributeXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAttribute: async (createAttributeRequestDTO: CreateAttributeRequestDTO, xLang?: CreateAttributeXLangEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createAttributeRequestDTO' is not null or undefined
            assertParamExists('createAttribute', 'createAttributeRequestDTO', createAttributeRequestDTO)
            const localVarPath = `/attributes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAttributeRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete attribute
         * @summary Delete attribute
         * @param {string} attributeId Id of attribute to be delete
         * @param {DeleteAttributeXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAttribute: async (attributeId: string, xLang?: DeleteAttributeXLangEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attributeId' is not null or undefined
            assertParamExists('deleteAttribute', 'attributeId', attributeId)
            const localVarPath = `/attributes/{attributeId}`
                .replace(`{${"attributeId"}}`, encodeURIComponent(String(attributeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get attribute by id
         * @summary Get attribute by id
         * @param {string} attributeId Id of attribute to be returned
         * @param {GetAttributeByIdXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributeById: async (attributeId: string, xLang?: GetAttributeByIdXLangEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attributeId' is not null or undefined
            assertParamExists('getAttributeById', 'attributeId', attributeId)
            const localVarPath = `/attributes/{attributeId}`
                .replace(`{${"attributeId"}}`, encodeURIComponent(String(attributeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get list of attribute
         * @summary Get list of attribute
         * @param {GetAttributesSelectTypeEnum} [selectType] Select deleted attributes to be returned
         * @param {number} [page] Page of attributes to be returned
         * @param {number} [pageSize] PageSize of attributes to be returned
         * @param {string} [keyword] Keyword to search
         * @param {GetAttributesXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributes: async (selectType?: GetAttributesSelectTypeEnum, page?: number, pageSize?: number, keyword?: string, xLang?: GetAttributesXLangEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/attributes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (selectType !== undefined) {
                localVarQueryParameter['select_type'] = selectType;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get attribute by label
         * @summary Get attribute by label
         * @param {string} label label of attribute to be returned
         * @param {GetAttributesByLabelXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributesByLabel: async (label: string, xLang?: GetAttributesByLabelXLangEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'label' is not null or undefined
            assertParamExists('getAttributesByLabel', 'label', label)
            const localVarPath = `/attributes/label/{label}`
                .replace(`{${"label"}}`, encodeURIComponent(String(label)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update attribute
         * @summary Update attribute
         * @param {string} attributeId 
         * @param {UpdateAttributeRequestDTO} updateAttributeRequestDTO 
         * @param {UpdateAttributeInfoXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAttributeInfo: async (attributeId: string, updateAttributeRequestDTO: UpdateAttributeRequestDTO, xLang?: UpdateAttributeInfoXLangEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attributeId' is not null or undefined
            assertParamExists('updateAttributeInfo', 'attributeId', attributeId)
            // verify required parameter 'updateAttributeRequestDTO' is not null or undefined
            assertParamExists('updateAttributeInfo', 'updateAttributeRequestDTO', updateAttributeRequestDTO)
            const localVarPath = `/attributes/{attributeId}`
                .replace(`{${"attributeId"}}`, encodeURIComponent(String(attributeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateAttributeRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AttributesApi - functional programming interface
 * @export
 */
export const AttributesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AttributesApiAxiosParamCreator(configuration)
    return {
        /**
         * Create attribute
         * @summary Create attribute
         * @param {CreateAttributeRequestDTO} createAttributeRequestDTO 
         * @param {CreateAttributeXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAttribute(createAttributeRequestDTO: CreateAttributeRequestDTO, xLang?: CreateAttributeXLangEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAttribute(createAttributeRequestDTO, xLang, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AttributesApi.createAttribute']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Delete attribute
         * @summary Delete attribute
         * @param {string} attributeId Id of attribute to be delete
         * @param {DeleteAttributeXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAttribute(attributeId: string, xLang?: DeleteAttributeXLangEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAttribute(attributeId, xLang, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AttributesApi.deleteAttribute']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get attribute by id
         * @summary Get attribute by id
         * @param {string} attributeId Id of attribute to be returned
         * @param {GetAttributeByIdXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttributeById(attributeId: string, xLang?: GetAttributeByIdXLangEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAttributeById(attributeId, xLang, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AttributesApi.getAttributeById']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get list of attribute
         * @summary Get list of attribute
         * @param {GetAttributesSelectTypeEnum} [selectType] Select deleted attributes to be returned
         * @param {number} [page] Page of attributes to be returned
         * @param {number} [pageSize] PageSize of attributes to be returned
         * @param {string} [keyword] Keyword to search
         * @param {GetAttributesXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttributes(selectType?: GetAttributesSelectTypeEnum, page?: number, pageSize?: number, keyword?: string, xLang?: GetAttributesXLangEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListAttributeResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAttributes(selectType, page, pageSize, keyword, xLang, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AttributesApi.getAttributes']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get attribute by label
         * @summary Get attribute by label
         * @param {string} label label of attribute to be returned
         * @param {GetAttributesByLabelXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttributesByLabel(label: string, xLang?: GetAttributesByLabelXLangEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAttributesByLabel(label, xLang, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AttributesApi.getAttributesByLabel']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Update attribute
         * @summary Update attribute
         * @param {string} attributeId 
         * @param {UpdateAttributeRequestDTO} updateAttributeRequestDTO 
         * @param {UpdateAttributeInfoXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAttributeInfo(attributeId: string, updateAttributeRequestDTO: UpdateAttributeRequestDTO, xLang?: UpdateAttributeInfoXLangEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAttributeInfo(attributeId, updateAttributeRequestDTO, xLang, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AttributesApi.updateAttributeInfo']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * AttributesApi - factory interface
 * @export
 */
export const AttributesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AttributesApiFp(configuration)
    return {
        /**
         * Create attribute
         * @summary Create attribute
         * @param {AttributesApiCreateAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAttribute(requestParameters: AttributesApiCreateAttributeRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createAttribute(requestParameters.createAttributeRequestDTO, requestParameters.xLang, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete attribute
         * @summary Delete attribute
         * @param {AttributesApiDeleteAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAttribute(requestParameters: AttributesApiDeleteAttributeRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteAttribute(requestParameters.attributeId, requestParameters.xLang, options).then((request) => request(axios, basePath));
        },
        /**
         * Get attribute by id
         * @summary Get attribute by id
         * @param {AttributesApiGetAttributeByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributeById(requestParameters: AttributesApiGetAttributeByIdRequest, options?: AxiosRequestConfig): AxiosPromise<AttributeDTO> {
            return localVarFp.getAttributeById(requestParameters.attributeId, requestParameters.xLang, options).then((request) => request(axios, basePath));
        },
        /**
         * Get list of attribute
         * @summary Get list of attribute
         * @param {AttributesApiGetAttributesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributes(requestParameters: AttributesApiGetAttributesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ListAttributeResponseDTO> {
            return localVarFp.getAttributes(requestParameters.selectType, requestParameters.page, requestParameters.pageSize, requestParameters.keyword, requestParameters.xLang, options).then((request) => request(axios, basePath));
        },
        /**
         * Get attribute by label
         * @summary Get attribute by label
         * @param {AttributesApiGetAttributesByLabelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributesByLabel(requestParameters: AttributesApiGetAttributesByLabelRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getAttributesByLabel(requestParameters.label, requestParameters.xLang, options).then((request) => request(axios, basePath));
        },
        /**
         * Update attribute
         * @summary Update attribute
         * @param {AttributesApiUpdateAttributeInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAttributeInfo(requestParameters: AttributesApiUpdateAttributeInfoRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateAttributeInfo(requestParameters.attributeId, requestParameters.updateAttributeRequestDTO, requestParameters.xLang, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createAttribute operation in AttributesApi.
 * @export
 * @interface AttributesApiCreateAttributeRequest
 */
export interface AttributesApiCreateAttributeRequest {
    /**
     * 
     * @type {CreateAttributeRequestDTO}
     * @memberof AttributesApiCreateAttribute
     */
    readonly createAttributeRequestDTO: CreateAttributeRequestDTO

    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof AttributesApiCreateAttribute
     */
    readonly xLang?: CreateAttributeXLangEnum
}

/**
 * Request parameters for deleteAttribute operation in AttributesApi.
 * @export
 * @interface AttributesApiDeleteAttributeRequest
 */
export interface AttributesApiDeleteAttributeRequest {
    /**
     * Id of attribute to be delete
     * @type {string}
     * @memberof AttributesApiDeleteAttribute
     */
    readonly attributeId: string

    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof AttributesApiDeleteAttribute
     */
    readonly xLang?: DeleteAttributeXLangEnum
}

/**
 * Request parameters for getAttributeById operation in AttributesApi.
 * @export
 * @interface AttributesApiGetAttributeByIdRequest
 */
export interface AttributesApiGetAttributeByIdRequest {
    /**
     * Id of attribute to be returned
     * @type {string}
     * @memberof AttributesApiGetAttributeById
     */
    readonly attributeId: string

    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof AttributesApiGetAttributeById
     */
    readonly xLang?: GetAttributeByIdXLangEnum
}

/**
 * Request parameters for getAttributes operation in AttributesApi.
 * @export
 * @interface AttributesApiGetAttributesRequest
 */
export interface AttributesApiGetAttributesRequest {
    /**
     * Select deleted attributes to be returned
     * @type {'only_active' | 'only_deleted' | 'both_deleted_and_active'}
     * @memberof AttributesApiGetAttributes
     */
    readonly selectType?: GetAttributesSelectTypeEnum

    /**
     * Page of attributes to be returned
     * @type {number}
     * @memberof AttributesApiGetAttributes
     */
    readonly page?: number

    /**
     * PageSize of attributes to be returned
     * @type {number}
     * @memberof AttributesApiGetAttributes
     */
    readonly pageSize?: number

    /**
     * Keyword to search
     * @type {string}
     * @memberof AttributesApiGetAttributes
     */
    readonly keyword?: string

    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof AttributesApiGetAttributes
     */
    readonly xLang?: GetAttributesXLangEnum
}

/**
 * Request parameters for getAttributesByLabel operation in AttributesApi.
 * @export
 * @interface AttributesApiGetAttributesByLabelRequest
 */
export interface AttributesApiGetAttributesByLabelRequest {
    /**
     * label of attribute to be returned
     * @type {string}
     * @memberof AttributesApiGetAttributesByLabel
     */
    readonly label: string

    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof AttributesApiGetAttributesByLabel
     */
    readonly xLang?: GetAttributesByLabelXLangEnum
}

/**
 * Request parameters for updateAttributeInfo operation in AttributesApi.
 * @export
 * @interface AttributesApiUpdateAttributeInfoRequest
 */
export interface AttributesApiUpdateAttributeInfoRequest {
    /**
     * 
     * @type {string}
     * @memberof AttributesApiUpdateAttributeInfo
     */
    readonly attributeId: string

    /**
     * 
     * @type {UpdateAttributeRequestDTO}
     * @memberof AttributesApiUpdateAttributeInfo
     */
    readonly updateAttributeRequestDTO: UpdateAttributeRequestDTO

    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof AttributesApiUpdateAttributeInfo
     */
    readonly xLang?: UpdateAttributeInfoXLangEnum
}

/**
 * AttributesApi - object-oriented interface
 * @export
 * @class AttributesApi
 * @extends {BaseAPI}
 */
export class AttributesApi extends BaseAPI {
    /**
     * Create attribute
     * @summary Create attribute
     * @param {AttributesApiCreateAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributesApi
     */
    public createAttribute(requestParameters: AttributesApiCreateAttributeRequest, options?: AxiosRequestConfig) {
        return AttributesApiFp(this.configuration).createAttribute(requestParameters.createAttributeRequestDTO, requestParameters.xLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete attribute
     * @summary Delete attribute
     * @param {AttributesApiDeleteAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributesApi
     */
    public deleteAttribute(requestParameters: AttributesApiDeleteAttributeRequest, options?: AxiosRequestConfig) {
        return AttributesApiFp(this.configuration).deleteAttribute(requestParameters.attributeId, requestParameters.xLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get attribute by id
     * @summary Get attribute by id
     * @param {AttributesApiGetAttributeByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributesApi
     */
    public getAttributeById(requestParameters: AttributesApiGetAttributeByIdRequest, options?: AxiosRequestConfig) {
        return AttributesApiFp(this.configuration).getAttributeById(requestParameters.attributeId, requestParameters.xLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get list of attribute
     * @summary Get list of attribute
     * @param {AttributesApiGetAttributesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributesApi
     */
    public getAttributes(requestParameters: AttributesApiGetAttributesRequest = {}, options?: AxiosRequestConfig) {
        return AttributesApiFp(this.configuration).getAttributes(requestParameters.selectType, requestParameters.page, requestParameters.pageSize, requestParameters.keyword, requestParameters.xLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get attribute by label
     * @summary Get attribute by label
     * @param {AttributesApiGetAttributesByLabelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributesApi
     */
    public getAttributesByLabel(requestParameters: AttributesApiGetAttributesByLabelRequest, options?: AxiosRequestConfig) {
        return AttributesApiFp(this.configuration).getAttributesByLabel(requestParameters.label, requestParameters.xLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update attribute
     * @summary Update attribute
     * @param {AttributesApiUpdateAttributeInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributesApi
     */
    public updateAttributeInfo(requestParameters: AttributesApiUpdateAttributeInfoRequest, options?: AxiosRequestConfig) {
        return AttributesApiFp(this.configuration).updateAttributeInfo(requestParameters.attributeId, requestParameters.updateAttributeRequestDTO, requestParameters.xLang, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
  * @export
  * @enum {string}
  */
export enum CreateAttributeXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
/**
  * @export
  * @enum {string}
  */
export enum DeleteAttributeXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
/**
  * @export
  * @enum {string}
  */
export enum GetAttributeByIdXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
/**
  * @export
  * @enum {string}
  */
export enum GetAttributesSelectTypeEnum {
    OnlyActive = 'only_active',
    OnlyDeleted = 'only_deleted',
    BothDeletedAndActive = 'both_deleted_and_active'
}
/**
  * @export
  * @enum {string}
  */
export enum GetAttributesXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
/**
  * @export
  * @enum {string}
  */
export enum GetAttributesByLabelXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
/**
  * @export
  * @enum {string}
  */
export enum UpdateAttributeInfoXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
