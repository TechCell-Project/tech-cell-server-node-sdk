/* tslint:disable */
/* eslint-disable */
/**
 * TechCell RESTful API Documentations
 * This is the documentation for the TechCell RESTful API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: teams@techcell.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { ListNotificationsResponseDTO } from '../models';
/**
 * NotificationsApi - axios parameter creator
 * @export
 */
export const NotificationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get notifications\'s user
         * @param {number} [page] Page number
         * @param {number} [pageSize] Number of items per page
         * @param {GetUserNotificationsReadTypeEnum} [readType] 
         * @param {GetUserNotificationsOrderByEnum} [orderBy] 
         * @param {GetUserNotificationsXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserNotifications: async (page?: number, pageSize?: number, readType?: GetUserNotificationsReadTypeEnum, orderBy?: GetUserNotificationsOrderByEnum, xLang?: GetUserNotificationsXLangEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/notifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (readType !== undefined) {
                localVarQueryParameter['readType'] = readType;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationsApi - functional programming interface
 * @export
 */
export const NotificationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NotificationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get notifications\'s user
         * @param {number} [page] Page number
         * @param {number} [pageSize] Number of items per page
         * @param {GetUserNotificationsReadTypeEnum} [readType] 
         * @param {GetUserNotificationsOrderByEnum} [orderBy] 
         * @param {GetUserNotificationsXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserNotifications(page?: number, pageSize?: number, readType?: GetUserNotificationsReadTypeEnum, orderBy?: GetUserNotificationsOrderByEnum, xLang?: GetUserNotificationsXLangEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListNotificationsResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserNotifications(page, pageSize, readType, orderBy, xLang, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['NotificationsApi.getUserNotifications']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * NotificationsApi - factory interface
 * @export
 */
export const NotificationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NotificationsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get notifications\'s user
         * @param {NotificationsApiGetUserNotificationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserNotifications(requestParameters: NotificationsApiGetUserNotificationsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ListNotificationsResponseDTO> {
            return localVarFp.getUserNotifications(requestParameters.page, requestParameters.pageSize, requestParameters.readType, requestParameters.orderBy, requestParameters.xLang, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getUserNotifications operation in NotificationsApi.
 * @export
 * @interface NotificationsApiGetUserNotificationsRequest
 */
export interface NotificationsApiGetUserNotificationsRequest {
    /**
     * Page number
     * @type {number}
     * @memberof NotificationsApiGetUserNotifications
     */
    readonly page?: number

    /**
     * Number of items per page
     * @type {number}
     * @memberof NotificationsApiGetUserNotifications
     */
    readonly pageSize?: number

    /**
     * 
     * @type {'read' | 'unread' | 'all'}
     * @memberof NotificationsApiGetUserNotifications
     */
    readonly readType?: GetUserNotificationsReadTypeEnum

    /**
     * 
     * @type {'newest' | 'oldest'}
     * @memberof NotificationsApiGetUserNotifications
     */
    readonly orderBy?: GetUserNotificationsOrderByEnum

    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof NotificationsApiGetUserNotifications
     */
    readonly xLang?: GetUserNotificationsXLangEnum
}

/**
 * NotificationsApi - object-oriented interface
 * @export
 * @class NotificationsApi
 * @extends {BaseAPI}
 */
export class NotificationsApi extends BaseAPI {
    /**
     * 
     * @summary Get notifications\'s user
     * @param {NotificationsApiGetUserNotificationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public getUserNotifications(requestParameters: NotificationsApiGetUserNotificationsRequest = {}, options?: AxiosRequestConfig) {
        return NotificationsApiFp(this.configuration).getUserNotifications(requestParameters.page, requestParameters.pageSize, requestParameters.readType, requestParameters.orderBy, requestParameters.xLang, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
  * @export
  * @enum {string}
  */
export enum GetUserNotificationsReadTypeEnum {
    Read = 'read',
    Unread = 'unread',
    All = 'all'
}
/**
  * @export
  * @enum {string}
  */
export enum GetUserNotificationsOrderByEnum {
    Newest = 'newest',
    Oldest = 'oldest'
}
/**
  * @export
  * @enum {string}
  */
export enum GetUserNotificationsXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
