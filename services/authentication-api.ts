/* tslint:disable */
/* eslint-disable */
/**
 * TechCell RESTful API Documentations
 * This is the documentation for the TechCell RESTful API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: teams@techcell.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { ChangePasswordRequestDTO } from '../models';
// @ts-ignore
import { EmailRequestDTO } from '../models';
// @ts-ignore
import { ForgotPasswordDTO } from '../models';
// @ts-ignore
import { GoogleLoginRequestDTO } from '../models';
// @ts-ignore
import { LoginRequestDTO } from '../models';
// @ts-ignore
import { NewTokenRequestDTO } from '../models';
// @ts-ignore
import { RegisterRequestDTO } from '../models';
// @ts-ignore
import { UserDataResponseDTO } from '../models';
// @ts-ignore
import { VerifyEmailRequestDTO } from '../models';
// @ts-ignore
import { VerifyForgotPasswordDTO } from '../models';
/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Change password
         * @summary Change password
         * @param {ChangePasswordRequestDTO} changePasswordRequestDTO 
         * @param {ChangePasswordXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword: async (changePasswordRequestDTO: ChangePasswordRequestDTO, xLang?: ChangePasswordXLangEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'changePasswordRequestDTO' is not null or undefined
            assertParamExists('changePassword', 'changePasswordRequestDTO', changePasswordRequestDTO)
            const localVarPath = `/auth/change-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changePasswordRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Check email is exist or not
         * @summary Check email is exist or not
         * @param {EmailRequestDTO} emailRequestDTO 
         * @param {CheckEmailXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkEmail: async (emailRequestDTO: EmailRequestDTO, xLang?: CheckEmailXLangEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emailRequestDTO' is not null or undefined
            assertParamExists('checkEmail', 'emailRequestDTO', emailRequestDTO)
            const localVarPath = `/auth/check-email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(emailRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Forgot password
         * @summary Forgot password
         * @param {ForgotPasswordDTO} forgotPasswordDTO 
         * @param {ForgotPasswordXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgotPassword: async (forgotPasswordDTO: ForgotPasswordDTO, xLang?: ForgotPasswordXLangEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'forgotPasswordDTO' is not null or undefined
            assertParamExists('forgotPassword', 'forgotPasswordDTO', forgotPasswordDTO)
            const localVarPath = `/auth/forgot-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(forgotPasswordDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get new token
         * @summary Get new token
         * @param {NewTokenRequestDTO} newTokenRequestDTO 
         * @param {GetNewTokenXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNewToken: async (newTokenRequestDTO: NewTokenRequestDTO, xLang?: GetNewTokenXLangEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'newTokenRequestDTO' is not null or undefined
            assertParamExists('getNewToken', 'newTokenRequestDTO', newTokenRequestDTO)
            const localVarPath = `/auth/refresh-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newTokenRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Login with google
         * @summary Login with google
         * @param {GoogleLoginRequestDTO} googleLoginRequestDTO 
         * @param {GoogleXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        google: async (googleLoginRequestDTO: GoogleLoginRequestDTO, xLang?: GoogleXLangEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'googleLoginRequestDTO' is not null or undefined
            assertParamExists('google', 'googleLoginRequestDTO', googleLoginRequestDTO)
            const localVarPath = `/auth/google`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(googleLoginRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Login
         * @summary Login
         * @param {LoginRequestDTO} loginRequestDTO 
         * @param {LoginXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (loginRequestDTO: LoginRequestDTO, xLang?: LoginXLangEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequestDTO' is not null or undefined
            assertParamExists('login', 'loginRequestDTO', loginRequestDTO)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Register new user
         * @summary Register new user
         * @param {RegisterRequestDTO} registerRequestDTO 
         * @param {RegisterXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: async (registerRequestDTO: RegisterRequestDTO, xLang?: RegisterXLangEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerRequestDTO' is not null or undefined
            assertParamExists('register', 'registerRequestDTO', registerRequestDTO)
            const localVarPath = `/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Resend verify email otp
         * @summary Resend verify email otp
         * @param {EmailRequestDTO} emailRequestDTO 
         * @param {ResendVerifyEmailOtpXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendVerifyEmailOtp: async (emailRequestDTO: EmailRequestDTO, xLang?: ResendVerifyEmailOtpXLangEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emailRequestDTO' is not null or undefined
            assertParamExists('resendVerifyEmailOtp', 'emailRequestDTO', emailRequestDTO)
            const localVarPath = `/auth/resend-verify-email-otp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(emailRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Verify email registration
         * @summary Verify email registration
         * @param {VerifyEmailRequestDTO} verifyEmailRequestDTO 
         * @param {VerifyEmailXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyEmail: async (verifyEmailRequestDTO: VerifyEmailRequestDTO, xLang?: VerifyEmailXLangEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'verifyEmailRequestDTO' is not null or undefined
            assertParamExists('verifyEmail', 'verifyEmailRequestDTO', verifyEmailRequestDTO)
            const localVarPath = `/auth/verify-email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(verifyEmailRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Verify forgot password
         * @summary Verify forgot password
         * @param {VerifyForgotPasswordDTO} verifyForgotPasswordDTO 
         * @param {VerifyForgotPasswordXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyForgotPassword: async (verifyForgotPasswordDTO: VerifyForgotPasswordDTO, xLang?: VerifyForgotPasswordXLangEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'verifyForgotPasswordDTO' is not null or undefined
            assertParamExists('verifyForgotPassword', 'verifyForgotPasswordDTO', verifyForgotPasswordDTO)
            const localVarPath = `/auth/verify-forgot-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(verifyForgotPasswordDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * Change password
         * @summary Change password
         * @param {ChangePasswordRequestDTO} changePasswordRequestDTO 
         * @param {ChangePasswordXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changePassword(changePasswordRequestDTO: ChangePasswordRequestDTO, xLang?: ChangePasswordXLangEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changePassword(changePasswordRequestDTO, xLang, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AuthenticationApi.changePassword']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Check email is exist or not
         * @summary Check email is exist or not
         * @param {EmailRequestDTO} emailRequestDTO 
         * @param {CheckEmailXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkEmail(emailRequestDTO: EmailRequestDTO, xLang?: CheckEmailXLangEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkEmail(emailRequestDTO, xLang, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AuthenticationApi.checkEmail']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Forgot password
         * @summary Forgot password
         * @param {ForgotPasswordDTO} forgotPasswordDTO 
         * @param {ForgotPasswordXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async forgotPassword(forgotPasswordDTO: ForgotPasswordDTO, xLang?: ForgotPasswordXLangEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.forgotPassword(forgotPasswordDTO, xLang, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AuthenticationApi.forgotPassword']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get new token
         * @summary Get new token
         * @param {NewTokenRequestDTO} newTokenRequestDTO 
         * @param {GetNewTokenXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNewToken(newTokenRequestDTO: NewTokenRequestDTO, xLang?: GetNewTokenXLangEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDataResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNewToken(newTokenRequestDTO, xLang, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AuthenticationApi.getNewToken']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Login with google
         * @summary Login with google
         * @param {GoogleLoginRequestDTO} googleLoginRequestDTO 
         * @param {GoogleXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async google(googleLoginRequestDTO: GoogleLoginRequestDTO, xLang?: GoogleXLangEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDataResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.google(googleLoginRequestDTO, xLang, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AuthenticationApi.google']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Login
         * @summary Login
         * @param {LoginRequestDTO} loginRequestDTO 
         * @param {LoginXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(loginRequestDTO: LoginRequestDTO, xLang?: LoginXLangEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDataResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginRequestDTO, xLang, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AuthenticationApi.login']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Register new user
         * @summary Register new user
         * @param {RegisterRequestDTO} registerRequestDTO 
         * @param {RegisterXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async register(registerRequestDTO: RegisterRequestDTO, xLang?: RegisterXLangEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDataResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.register(registerRequestDTO, xLang, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AuthenticationApi.register']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Resend verify email otp
         * @summary Resend verify email otp
         * @param {EmailRequestDTO} emailRequestDTO 
         * @param {ResendVerifyEmailOtpXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resendVerifyEmailOtp(emailRequestDTO: EmailRequestDTO, xLang?: ResendVerifyEmailOtpXLangEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resendVerifyEmailOtp(emailRequestDTO, xLang, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AuthenticationApi.resendVerifyEmailOtp']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Verify email registration
         * @summary Verify email registration
         * @param {VerifyEmailRequestDTO} verifyEmailRequestDTO 
         * @param {VerifyEmailXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyEmail(verifyEmailRequestDTO: VerifyEmailRequestDTO, xLang?: VerifyEmailXLangEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyEmail(verifyEmailRequestDTO, xLang, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AuthenticationApi.verifyEmail']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Verify forgot password
         * @summary Verify forgot password
         * @param {VerifyForgotPasswordDTO} verifyForgotPasswordDTO 
         * @param {VerifyForgotPasswordXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyForgotPassword(verifyForgotPasswordDTO: VerifyForgotPasswordDTO, xLang?: VerifyForgotPasswordXLangEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyForgotPassword(verifyForgotPasswordDTO, xLang, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AuthenticationApi.verifyForgotPassword']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * Change password
         * @summary Change password
         * @param {AuthenticationApiChangePasswordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword(requestParameters: AuthenticationApiChangePasswordRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.changePassword(requestParameters.changePasswordRequestDTO, requestParameters.xLang, options).then((request) => request(axios, basePath));
        },
        /**
         * Check email is exist or not
         * @summary Check email is exist or not
         * @param {AuthenticationApiCheckEmailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkEmail(requestParameters: AuthenticationApiCheckEmailRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.checkEmail(requestParameters.emailRequestDTO, requestParameters.xLang, options).then((request) => request(axios, basePath));
        },
        /**
         * Forgot password
         * @summary Forgot password
         * @param {AuthenticationApiForgotPasswordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgotPassword(requestParameters: AuthenticationApiForgotPasswordRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.forgotPassword(requestParameters.forgotPasswordDTO, requestParameters.xLang, options).then((request) => request(axios, basePath));
        },
        /**
         * Get new token
         * @summary Get new token
         * @param {AuthenticationApiGetNewTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNewToken(requestParameters: AuthenticationApiGetNewTokenRequest, options?: AxiosRequestConfig): AxiosPromise<UserDataResponseDTO> {
            return localVarFp.getNewToken(requestParameters.newTokenRequestDTO, requestParameters.xLang, options).then((request) => request(axios, basePath));
        },
        /**
         * Login with google
         * @summary Login with google
         * @param {AuthenticationApiGoogleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        google(requestParameters: AuthenticationApiGoogleRequest, options?: AxiosRequestConfig): AxiosPromise<UserDataResponseDTO> {
            return localVarFp.google(requestParameters.googleLoginRequestDTO, requestParameters.xLang, options).then((request) => request(axios, basePath));
        },
        /**
         * Login
         * @summary Login
         * @param {AuthenticationApiLoginRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(requestParameters: AuthenticationApiLoginRequest, options?: AxiosRequestConfig): AxiosPromise<UserDataResponseDTO> {
            return localVarFp.login(requestParameters.loginRequestDTO, requestParameters.xLang, options).then((request) => request(axios, basePath));
        },
        /**
         * Register new user
         * @summary Register new user
         * @param {AuthenticationApiRegisterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(requestParameters: AuthenticationApiRegisterRequest, options?: AxiosRequestConfig): AxiosPromise<UserDataResponseDTO> {
            return localVarFp.register(requestParameters.registerRequestDTO, requestParameters.xLang, options).then((request) => request(axios, basePath));
        },
        /**
         * Resend verify email otp
         * @summary Resend verify email otp
         * @param {AuthenticationApiResendVerifyEmailOtpRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendVerifyEmailOtp(requestParameters: AuthenticationApiResendVerifyEmailOtpRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.resendVerifyEmailOtp(requestParameters.emailRequestDTO, requestParameters.xLang, options).then((request) => request(axios, basePath));
        },
        /**
         * Verify email registration
         * @summary Verify email registration
         * @param {AuthenticationApiVerifyEmailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyEmail(requestParameters: AuthenticationApiVerifyEmailRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.verifyEmail(requestParameters.verifyEmailRequestDTO, requestParameters.xLang, options).then((request) => request(axios, basePath));
        },
        /**
         * Verify forgot password
         * @summary Verify forgot password
         * @param {AuthenticationApiVerifyForgotPasswordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyForgotPassword(requestParameters: AuthenticationApiVerifyForgotPasswordRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.verifyForgotPassword(requestParameters.verifyForgotPasswordDTO, requestParameters.xLang, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for changePassword operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiChangePasswordRequest
 */
export interface AuthenticationApiChangePasswordRequest {
    /**
     * 
     * @type {ChangePasswordRequestDTO}
     * @memberof AuthenticationApiChangePassword
     */
    readonly changePasswordRequestDTO: ChangePasswordRequestDTO

    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof AuthenticationApiChangePassword
     */
    readonly xLang?: ChangePasswordXLangEnum
}

/**
 * Request parameters for checkEmail operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiCheckEmailRequest
 */
export interface AuthenticationApiCheckEmailRequest {
    /**
     * 
     * @type {EmailRequestDTO}
     * @memberof AuthenticationApiCheckEmail
     */
    readonly emailRequestDTO: EmailRequestDTO

    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof AuthenticationApiCheckEmail
     */
    readonly xLang?: CheckEmailXLangEnum
}

/**
 * Request parameters for forgotPassword operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiForgotPasswordRequest
 */
export interface AuthenticationApiForgotPasswordRequest {
    /**
     * 
     * @type {ForgotPasswordDTO}
     * @memberof AuthenticationApiForgotPassword
     */
    readonly forgotPasswordDTO: ForgotPasswordDTO

    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof AuthenticationApiForgotPassword
     */
    readonly xLang?: ForgotPasswordXLangEnum
}

/**
 * Request parameters for getNewToken operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiGetNewTokenRequest
 */
export interface AuthenticationApiGetNewTokenRequest {
    /**
     * 
     * @type {NewTokenRequestDTO}
     * @memberof AuthenticationApiGetNewToken
     */
    readonly newTokenRequestDTO: NewTokenRequestDTO

    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof AuthenticationApiGetNewToken
     */
    readonly xLang?: GetNewTokenXLangEnum
}

/**
 * Request parameters for google operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiGoogleRequest
 */
export interface AuthenticationApiGoogleRequest {
    /**
     * 
     * @type {GoogleLoginRequestDTO}
     * @memberof AuthenticationApiGoogle
     */
    readonly googleLoginRequestDTO: GoogleLoginRequestDTO

    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof AuthenticationApiGoogle
     */
    readonly xLang?: GoogleXLangEnum
}

/**
 * Request parameters for login operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiLoginRequest
 */
export interface AuthenticationApiLoginRequest {
    /**
     * 
     * @type {LoginRequestDTO}
     * @memberof AuthenticationApiLogin
     */
    readonly loginRequestDTO: LoginRequestDTO

    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof AuthenticationApiLogin
     */
    readonly xLang?: LoginXLangEnum
}

/**
 * Request parameters for register operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiRegisterRequest
 */
export interface AuthenticationApiRegisterRequest {
    /**
     * 
     * @type {RegisterRequestDTO}
     * @memberof AuthenticationApiRegister
     */
    readonly registerRequestDTO: RegisterRequestDTO

    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof AuthenticationApiRegister
     */
    readonly xLang?: RegisterXLangEnum
}

/**
 * Request parameters for resendVerifyEmailOtp operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiResendVerifyEmailOtpRequest
 */
export interface AuthenticationApiResendVerifyEmailOtpRequest {
    /**
     * 
     * @type {EmailRequestDTO}
     * @memberof AuthenticationApiResendVerifyEmailOtp
     */
    readonly emailRequestDTO: EmailRequestDTO

    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof AuthenticationApiResendVerifyEmailOtp
     */
    readonly xLang?: ResendVerifyEmailOtpXLangEnum
}

/**
 * Request parameters for verifyEmail operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiVerifyEmailRequest
 */
export interface AuthenticationApiVerifyEmailRequest {
    /**
     * 
     * @type {VerifyEmailRequestDTO}
     * @memberof AuthenticationApiVerifyEmail
     */
    readonly verifyEmailRequestDTO: VerifyEmailRequestDTO

    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof AuthenticationApiVerifyEmail
     */
    readonly xLang?: VerifyEmailXLangEnum
}

/**
 * Request parameters for verifyForgotPassword operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiVerifyForgotPasswordRequest
 */
export interface AuthenticationApiVerifyForgotPasswordRequest {
    /**
     * 
     * @type {VerifyForgotPasswordDTO}
     * @memberof AuthenticationApiVerifyForgotPassword
     */
    readonly verifyForgotPasswordDTO: VerifyForgotPasswordDTO

    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof AuthenticationApiVerifyForgotPassword
     */
    readonly xLang?: VerifyForgotPasswordXLangEnum
}

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * Change password
     * @summary Change password
     * @param {AuthenticationApiChangePasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public changePassword(requestParameters: AuthenticationApiChangePasswordRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).changePassword(requestParameters.changePasswordRequestDTO, requestParameters.xLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Check email is exist or not
     * @summary Check email is exist or not
     * @param {AuthenticationApiCheckEmailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public checkEmail(requestParameters: AuthenticationApiCheckEmailRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).checkEmail(requestParameters.emailRequestDTO, requestParameters.xLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Forgot password
     * @summary Forgot password
     * @param {AuthenticationApiForgotPasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public forgotPassword(requestParameters: AuthenticationApiForgotPasswordRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).forgotPassword(requestParameters.forgotPasswordDTO, requestParameters.xLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get new token
     * @summary Get new token
     * @param {AuthenticationApiGetNewTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public getNewToken(requestParameters: AuthenticationApiGetNewTokenRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).getNewToken(requestParameters.newTokenRequestDTO, requestParameters.xLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Login with google
     * @summary Login with google
     * @param {AuthenticationApiGoogleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public google(requestParameters: AuthenticationApiGoogleRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).google(requestParameters.googleLoginRequestDTO, requestParameters.xLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Login
     * @summary Login
     * @param {AuthenticationApiLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public login(requestParameters: AuthenticationApiLoginRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).login(requestParameters.loginRequestDTO, requestParameters.xLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Register new user
     * @summary Register new user
     * @param {AuthenticationApiRegisterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public register(requestParameters: AuthenticationApiRegisterRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).register(requestParameters.registerRequestDTO, requestParameters.xLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Resend verify email otp
     * @summary Resend verify email otp
     * @param {AuthenticationApiResendVerifyEmailOtpRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public resendVerifyEmailOtp(requestParameters: AuthenticationApiResendVerifyEmailOtpRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).resendVerifyEmailOtp(requestParameters.emailRequestDTO, requestParameters.xLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Verify email registration
     * @summary Verify email registration
     * @param {AuthenticationApiVerifyEmailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public verifyEmail(requestParameters: AuthenticationApiVerifyEmailRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).verifyEmail(requestParameters.verifyEmailRequestDTO, requestParameters.xLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Verify forgot password
     * @summary Verify forgot password
     * @param {AuthenticationApiVerifyForgotPasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public verifyForgotPassword(requestParameters: AuthenticationApiVerifyForgotPasswordRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).verifyForgotPassword(requestParameters.verifyForgotPasswordDTO, requestParameters.xLang, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
  * @export
  * @enum {string}
  */
export enum ChangePasswordXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
/**
  * @export
  * @enum {string}
  */
export enum CheckEmailXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
/**
  * @export
  * @enum {string}
  */
export enum ForgotPasswordXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
/**
  * @export
  * @enum {string}
  */
export enum GetNewTokenXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
/**
  * @export
  * @enum {string}
  */
export enum GoogleXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
/**
  * @export
  * @enum {string}
  */
export enum LoginXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
/**
  * @export
  * @enum {string}
  */
export enum RegisterXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
/**
  * @export
  * @enum {string}
  */
export enum ResendVerifyEmailOtpXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
/**
  * @export
  * @enum {string}
  */
export enum VerifyEmailXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
/**
  * @export
  * @enum {string}
  */
export enum VerifyForgotPasswordXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
