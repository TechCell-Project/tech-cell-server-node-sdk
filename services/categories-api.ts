/* tslint:disable */
/* eslint-disable */
/**
 * TechCell RESTful API Documentations
 * This is the documentation for the TechCell RESTful API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: teams@techcell.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { CategoryDTO } from '../models';
// @ts-ignore
import { CreateCategoryRequestDTO } from '../models';
// @ts-ignore
import { ListCategoryResponseDTO } from '../models';
// @ts-ignore
import { UpdateCategoryRequestDTO } from '../models';
/**
 * CategoriesApi - axios parameter creator
 * @export
 */
export const CategoriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create category
         * @summary Create category
         * @param {CreateCategoryRequestDTO} createCategoryRequestDTO 
         * @param {CreateCategoryXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCategory: async (createCategoryRequestDTO: CreateCategoryRequestDTO, xLang?: CreateCategoryXLangEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCategoryRequestDTO' is not null or undefined
            assertParamExists('createCategory', 'createCategoryRequestDTO', createCategoryRequestDTO)
            const localVarPath = `/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCategoryRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get list of categories
         * @summary Get list of categories
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [keyword] Keyword to search
         * @param {GetCategoriesXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategories: async (page?: number, pageSize?: number, keyword?: string, xLang?: GetCategoriesXLangEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get category by id
         * @summary Get category by id
         * @param {string} categoryId Category id
         * @param {GetCategoryByIdXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoryById: async (categoryId: string, xLang?: GetCategoryByIdXLangEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('getCategoryById', 'categoryId', categoryId)
            const localVarPath = `/categories/{categoryId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get category by label
         * @summary Get category by label
         * @param {string} label Label of category to be returned
         * @param {GetCategoryByLabelXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoryByLabel: async (label: string, xLang?: GetCategoryByLabelXLangEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'label' is not null or undefined
            assertParamExists('getCategoryByLabel', 'label', label)
            const localVarPath = `/categories/label/{label}`
                .replace(`{${"label"}}`, encodeURIComponent(String(label)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update category
         * @summary Update category
         * @param {string} categoryId Category id
         * @param {UpdateCategoryRequestDTO} updateCategoryRequestDTO 
         * @param {UpdateCategoryXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategory: async (categoryId: string, updateCategoryRequestDTO: UpdateCategoryRequestDTO, xLang?: UpdateCategoryXLangEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('updateCategory', 'categoryId', categoryId)
            // verify required parameter 'updateCategoryRequestDTO' is not null or undefined
            assertParamExists('updateCategory', 'updateCategoryRequestDTO', updateCategoryRequestDTO)
            const localVarPath = `/categories/{categoryId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCategoryRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoriesApi - functional programming interface
 * @export
 */
export const CategoriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoriesApiAxiosParamCreator(configuration)
    return {
        /**
         * Create category
         * @summary Create category
         * @param {CreateCategoryRequestDTO} createCategoryRequestDTO 
         * @param {CreateCategoryXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCategory(createCategoryRequestDTO: CreateCategoryRequestDTO, xLang?: CreateCategoryXLangEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCategory(createCategoryRequestDTO, xLang, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CategoriesApi.createCategory']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get list of categories
         * @summary Get list of categories
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [keyword] Keyword to search
         * @param {GetCategoriesXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategories(page?: number, pageSize?: number, keyword?: string, xLang?: GetCategoriesXLangEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCategoryResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCategories(page, pageSize, keyword, xLang, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CategoriesApi.getCategories']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get category by id
         * @summary Get category by id
         * @param {string} categoryId Category id
         * @param {GetCategoryByIdXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategoryById(categoryId: string, xLang?: GetCategoryByIdXLangEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCategoryById(categoryId, xLang, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CategoriesApi.getCategoryById']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get category by label
         * @summary Get category by label
         * @param {string} label Label of category to be returned
         * @param {GetCategoryByLabelXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategoryByLabel(label: string, xLang?: GetCategoryByLabelXLangEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCategoryByLabel(label, xLang, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CategoriesApi.getCategoryByLabel']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Update category
         * @summary Update category
         * @param {string} categoryId Category id
         * @param {UpdateCategoryRequestDTO} updateCategoryRequestDTO 
         * @param {UpdateCategoryXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCategory(categoryId: string, updateCategoryRequestDTO: UpdateCategoryRequestDTO, xLang?: UpdateCategoryXLangEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCategory(categoryId, updateCategoryRequestDTO, xLang, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CategoriesApi.updateCategory']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * CategoriesApi - factory interface
 * @export
 */
export const CategoriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoriesApiFp(configuration)
    return {
        /**
         * Create category
         * @summary Create category
         * @param {CategoriesApiCreateCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCategory(requestParameters: CategoriesApiCreateCategoryRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createCategory(requestParameters.createCategoryRequestDTO, requestParameters.xLang, options).then((request) => request(axios, basePath));
        },
        /**
         * Get list of categories
         * @summary Get list of categories
         * @param {CategoriesApiGetCategoriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategories(requestParameters: CategoriesApiGetCategoriesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ListCategoryResponseDTO> {
            return localVarFp.getCategories(requestParameters.page, requestParameters.pageSize, requestParameters.keyword, requestParameters.xLang, options).then((request) => request(axios, basePath));
        },
        /**
         * Get category by id
         * @summary Get category by id
         * @param {CategoriesApiGetCategoryByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoryById(requestParameters: CategoriesApiGetCategoryByIdRequest, options?: AxiosRequestConfig): AxiosPromise<CategoryDTO> {
            return localVarFp.getCategoryById(requestParameters.categoryId, requestParameters.xLang, options).then((request) => request(axios, basePath));
        },
        /**
         * Get category by label
         * @summary Get category by label
         * @param {CategoriesApiGetCategoryByLabelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoryByLabel(requestParameters: CategoriesApiGetCategoryByLabelRequest, options?: AxiosRequestConfig): AxiosPromise<CategoryDTO> {
            return localVarFp.getCategoryByLabel(requestParameters.label, requestParameters.xLang, options).then((request) => request(axios, basePath));
        },
        /**
         * Update category
         * @summary Update category
         * @param {CategoriesApiUpdateCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategory(requestParameters: CategoriesApiUpdateCategoryRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateCategory(requestParameters.categoryId, requestParameters.updateCategoryRequestDTO, requestParameters.xLang, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createCategory operation in CategoriesApi.
 * @export
 * @interface CategoriesApiCreateCategoryRequest
 */
export interface CategoriesApiCreateCategoryRequest {
    /**
     * 
     * @type {CreateCategoryRequestDTO}
     * @memberof CategoriesApiCreateCategory
     */
    readonly createCategoryRequestDTO: CreateCategoryRequestDTO

    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof CategoriesApiCreateCategory
     */
    readonly xLang?: CreateCategoryXLangEnum
}

/**
 * Request parameters for getCategories operation in CategoriesApi.
 * @export
 * @interface CategoriesApiGetCategoriesRequest
 */
export interface CategoriesApiGetCategoriesRequest {
    /**
     * 
     * @type {number}
     * @memberof CategoriesApiGetCategories
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof CategoriesApiGetCategories
     */
    readonly pageSize?: number

    /**
     * Keyword to search
     * @type {string}
     * @memberof CategoriesApiGetCategories
     */
    readonly keyword?: string

    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof CategoriesApiGetCategories
     */
    readonly xLang?: GetCategoriesXLangEnum
}

/**
 * Request parameters for getCategoryById operation in CategoriesApi.
 * @export
 * @interface CategoriesApiGetCategoryByIdRequest
 */
export interface CategoriesApiGetCategoryByIdRequest {
    /**
     * Category id
     * @type {string}
     * @memberof CategoriesApiGetCategoryById
     */
    readonly categoryId: string

    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof CategoriesApiGetCategoryById
     */
    readonly xLang?: GetCategoryByIdXLangEnum
}

/**
 * Request parameters for getCategoryByLabel operation in CategoriesApi.
 * @export
 * @interface CategoriesApiGetCategoryByLabelRequest
 */
export interface CategoriesApiGetCategoryByLabelRequest {
    /**
     * Label of category to be returned
     * @type {string}
     * @memberof CategoriesApiGetCategoryByLabel
     */
    readonly label: string

    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof CategoriesApiGetCategoryByLabel
     */
    readonly xLang?: GetCategoryByLabelXLangEnum
}

/**
 * Request parameters for updateCategory operation in CategoriesApi.
 * @export
 * @interface CategoriesApiUpdateCategoryRequest
 */
export interface CategoriesApiUpdateCategoryRequest {
    /**
     * Category id
     * @type {string}
     * @memberof CategoriesApiUpdateCategory
     */
    readonly categoryId: string

    /**
     * 
     * @type {UpdateCategoryRequestDTO}
     * @memberof CategoriesApiUpdateCategory
     */
    readonly updateCategoryRequestDTO: UpdateCategoryRequestDTO

    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof CategoriesApiUpdateCategory
     */
    readonly xLang?: UpdateCategoryXLangEnum
}

/**
 * CategoriesApi - object-oriented interface
 * @export
 * @class CategoriesApi
 * @extends {BaseAPI}
 */
export class CategoriesApi extends BaseAPI {
    /**
     * Create category
     * @summary Create category
     * @param {CategoriesApiCreateCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public createCategory(requestParameters: CategoriesApiCreateCategoryRequest, options?: AxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).createCategory(requestParameters.createCategoryRequestDTO, requestParameters.xLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get list of categories
     * @summary Get list of categories
     * @param {CategoriesApiGetCategoriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public getCategories(requestParameters: CategoriesApiGetCategoriesRequest = {}, options?: AxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).getCategories(requestParameters.page, requestParameters.pageSize, requestParameters.keyword, requestParameters.xLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get category by id
     * @summary Get category by id
     * @param {CategoriesApiGetCategoryByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public getCategoryById(requestParameters: CategoriesApiGetCategoryByIdRequest, options?: AxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).getCategoryById(requestParameters.categoryId, requestParameters.xLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get category by label
     * @summary Get category by label
     * @param {CategoriesApiGetCategoryByLabelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public getCategoryByLabel(requestParameters: CategoriesApiGetCategoryByLabelRequest, options?: AxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).getCategoryByLabel(requestParameters.label, requestParameters.xLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update category
     * @summary Update category
     * @param {CategoriesApiUpdateCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public updateCategory(requestParameters: CategoriesApiUpdateCategoryRequest, options?: AxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).updateCategory(requestParameters.categoryId, requestParameters.updateCategoryRequestDTO, requestParameters.xLang, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
  * @export
  * @enum {string}
  */
export enum CreateCategoryXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
/**
  * @export
  * @enum {string}
  */
export enum GetCategoriesXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
/**
  * @export
  * @enum {string}
  */
export enum GetCategoryByIdXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
/**
  * @export
  * @enum {string}
  */
export enum GetCategoryByLabelXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
/**
  * @export
  * @enum {string}
  */
export enum UpdateCategoryXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
