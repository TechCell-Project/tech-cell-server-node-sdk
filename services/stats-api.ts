/* tslint:disable */
/* eslint-disable */
/**
 * TechCell RESTful API Documentations
 * This is the documentation for the TechCell RESTful API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: teams@techcell.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { GetStatsResponseDTO } from '../models';
/**
 * StatsApi - axios parameter creator
 * @export
 */
export const StatsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get stats in a period of time
         * @param {string} fromDate From date to calculate revenue
         * @param {GetStatsTypeEnum} type Type of stats
         * @param {GetStatsOrderStatusEnum} [orderStatus] Status of type to get stats
         * @param {GetStatsPaymentStatusEnum} [paymentStatus] Status of payment to get stats
         * @param {GetStatsGetByEnum} [getBy] Get stats by field, default is createdAt
         * @param {string} [toDate] To date to calculate revenue, default is today
         * @param {GetStatsSplitByEnum} [splitBy] Split by day, month or year
         * @param {boolean} [refreshCache] Trigger refresh cache to recalculate revenue data
         * @param {GetStatsXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStats: async (fromDate: string, type: GetStatsTypeEnum, orderStatus?: GetStatsOrderStatusEnum, paymentStatus?: GetStatsPaymentStatusEnum, getBy?: GetStatsGetByEnum, toDate?: string, splitBy?: GetStatsSplitByEnum, refreshCache?: boolean, xLang?: GetStatsXLangEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fromDate' is not null or undefined
            assertParamExists('getStats', 'fromDate', fromDate)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('getStats', 'type', type)
            const localVarPath = `/stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (orderStatus !== undefined) {
                localVarQueryParameter['orderStatus'] = orderStatus;
            }

            if (paymentStatus !== undefined) {
                localVarQueryParameter['paymentStatus'] = paymentStatus;
            }

            if (getBy !== undefined) {
                localVarQueryParameter['getBy'] = getBy;
            }

            if (fromDate !== undefined) {
                localVarQueryParameter['fromDate'] = (fromDate as any instanceof Date) ?
                    (fromDate as any).toISOString() :
                    fromDate;
            }

            if (toDate !== undefined) {
                localVarQueryParameter['toDate'] = (toDate as any instanceof Date) ?
                    (toDate as any).toISOString() :
                    toDate;
            }

            if (splitBy !== undefined) {
                localVarQueryParameter['splitBy'] = splitBy;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (refreshCache !== undefined) {
                localVarQueryParameter['refreshCache'] = refreshCache;
            }

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get orders stats in a period of time
         * @param {string} fromDate From date to calculate revenue
         * @param {string} [toDate] To date to calculate revenue, default is today
         * @param {boolean} [refreshCache] Trigger refresh cache to recalculate revenue data
         * @param {GetStatsOrdersGetByEnum} [getBy] Get stats by field, default is createdAt
         * @param {GetStatsOrdersXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatsOrders: async (fromDate: string, toDate?: string, refreshCache?: boolean, getBy?: GetStatsOrdersGetByEnum, xLang?: GetStatsOrdersXLangEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fromDate' is not null or undefined
            assertParamExists('getStatsOrders', 'fromDate', fromDate)
            const localVarPath = `/stats/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (fromDate !== undefined) {
                localVarQueryParameter['fromDate'] = (fromDate as any instanceof Date) ?
                    (fromDate as any).toISOString() :
                    fromDate;
            }

            if (toDate !== undefined) {
                localVarQueryParameter['toDate'] = (toDate as any instanceof Date) ?
                    (toDate as any).toISOString() :
                    toDate;
            }

            if (refreshCache !== undefined) {
                localVarQueryParameter['refreshCache'] = refreshCache;
            }

            if (getBy !== undefined) {
                localVarQueryParameter['getBy'] = getBy;
            }

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StatsApi - functional programming interface
 * @export
 */
export const StatsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StatsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get stats in a period of time
         * @param {string} fromDate From date to calculate revenue
         * @param {GetStatsTypeEnum} type Type of stats
         * @param {GetStatsOrderStatusEnum} [orderStatus] Status of type to get stats
         * @param {GetStatsPaymentStatusEnum} [paymentStatus] Status of payment to get stats
         * @param {GetStatsGetByEnum} [getBy] Get stats by field, default is createdAt
         * @param {string} [toDate] To date to calculate revenue, default is today
         * @param {GetStatsSplitByEnum} [splitBy] Split by day, month or year
         * @param {boolean} [refreshCache] Trigger refresh cache to recalculate revenue data
         * @param {GetStatsXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStats(fromDate: string, type: GetStatsTypeEnum, orderStatus?: GetStatsOrderStatusEnum, paymentStatus?: GetStatsPaymentStatusEnum, getBy?: GetStatsGetByEnum, toDate?: string, splitBy?: GetStatsSplitByEnum, refreshCache?: boolean, xLang?: GetStatsXLangEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetStatsResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStats(fromDate, type, orderStatus, paymentStatus, getBy, toDate, splitBy, refreshCache, xLang, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['StatsApi.getStats']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get orders stats in a period of time
         * @param {string} fromDate From date to calculate revenue
         * @param {string} [toDate] To date to calculate revenue, default is today
         * @param {boolean} [refreshCache] Trigger refresh cache to recalculate revenue data
         * @param {GetStatsOrdersGetByEnum} [getBy] Get stats by field, default is createdAt
         * @param {GetStatsOrdersXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStatsOrders(fromDate: string, toDate?: string, refreshCache?: boolean, getBy?: GetStatsOrdersGetByEnum, xLang?: GetStatsOrdersXLangEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStatsOrders(fromDate, toDate, refreshCache, getBy, xLang, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['StatsApi.getStatsOrders']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * StatsApi - factory interface
 * @export
 */
export const StatsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StatsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get stats in a period of time
         * @param {StatsApiGetStatsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStats(requestParameters: StatsApiGetStatsRequest, options?: AxiosRequestConfig): AxiosPromise<GetStatsResponseDTO> {
            return localVarFp.getStats(requestParameters.fromDate, requestParameters.type, requestParameters.orderStatus, requestParameters.paymentStatus, requestParameters.getBy, requestParameters.toDate, requestParameters.splitBy, requestParameters.refreshCache, requestParameters.xLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get orders stats in a period of time
         * @param {StatsApiGetStatsOrdersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatsOrders(requestParameters: StatsApiGetStatsOrdersRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getStatsOrders(requestParameters.fromDate, requestParameters.toDate, requestParameters.refreshCache, requestParameters.getBy, requestParameters.xLang, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getStats operation in StatsApi.
 * @export
 * @interface StatsApiGetStatsRequest
 */
export interface StatsApiGetStatsRequest {
    /**
     * From date to calculate revenue
     * @type {string}
     * @memberof StatsApiGetStats
     */
    readonly fromDate: string

    /**
     * Type of stats
     * @type {'order' | 'revenue'}
     * @memberof StatsApiGetStats
     */
    readonly type: GetStatsTypeEnum

    /**
     * Status of type to get stats
     * @type {'pending' | 'cancelled' | 'processing' | 'shipping' | 'completed' | 'refunded'}
     * @memberof StatsApiGetStats
     */
    readonly orderStatus?: GetStatsOrderStatusEnum

    /**
     * Status of payment to get stats
     * @type {'pending' | 'cancelled' | 'processing' | 'wait_for_payment' | 'completed' | 'refunded'}
     * @memberof StatsApiGetStats
     */
    readonly paymentStatus?: GetStatsPaymentStatusEnum

    /**
     * Get stats by field, default is createdAt
     * @type {'createdAt' | 'updatedAt'}
     * @memberof StatsApiGetStats
     */
    readonly getBy?: GetStatsGetByEnum

    /**
     * To date to calculate revenue, default is today
     * @type {string}
     * @memberof StatsApiGetStats
     */
    readonly toDate?: string

    /**
     * Split by day, month or year
     * @type {'day' | 'week' | 'month' | 'year'}
     * @memberof StatsApiGetStats
     */
    readonly splitBy?: GetStatsSplitByEnum

    /**
     * Trigger refresh cache to recalculate revenue data
     * @type {boolean}
     * @memberof StatsApiGetStats
     */
    readonly refreshCache?: boolean

    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof StatsApiGetStats
     */
    readonly xLang?: GetStatsXLangEnum
}

/**
 * Request parameters for getStatsOrders operation in StatsApi.
 * @export
 * @interface StatsApiGetStatsOrdersRequest
 */
export interface StatsApiGetStatsOrdersRequest {
    /**
     * From date to calculate revenue
     * @type {string}
     * @memberof StatsApiGetStatsOrders
     */
    readonly fromDate: string

    /**
     * To date to calculate revenue, default is today
     * @type {string}
     * @memberof StatsApiGetStatsOrders
     */
    readonly toDate?: string

    /**
     * Trigger refresh cache to recalculate revenue data
     * @type {boolean}
     * @memberof StatsApiGetStatsOrders
     */
    readonly refreshCache?: boolean

    /**
     * Get stats by field, default is createdAt
     * @type {'createdAt' | 'updatedAt'}
     * @memberof StatsApiGetStatsOrders
     */
    readonly getBy?: GetStatsOrdersGetByEnum

    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof StatsApiGetStatsOrders
     */
    readonly xLang?: GetStatsOrdersXLangEnum
}

/**
 * StatsApi - object-oriented interface
 * @export
 * @class StatsApi
 * @extends {BaseAPI}
 */
export class StatsApi extends BaseAPI {
    /**
     * 
     * @summary Get stats in a period of time
     * @param {StatsApiGetStatsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatsApi
     */
    public getStats(requestParameters: StatsApiGetStatsRequest, options?: AxiosRequestConfig) {
        return StatsApiFp(this.configuration).getStats(requestParameters.fromDate, requestParameters.type, requestParameters.orderStatus, requestParameters.paymentStatus, requestParameters.getBy, requestParameters.toDate, requestParameters.splitBy, requestParameters.refreshCache, requestParameters.xLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get orders stats in a period of time
     * @param {StatsApiGetStatsOrdersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatsApi
     */
    public getStatsOrders(requestParameters: StatsApiGetStatsOrdersRequest, options?: AxiosRequestConfig) {
        return StatsApiFp(this.configuration).getStatsOrders(requestParameters.fromDate, requestParameters.toDate, requestParameters.refreshCache, requestParameters.getBy, requestParameters.xLang, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
  * @export
  * @enum {string}
  */
export enum GetStatsTypeEnum {
    Order = 'order',
    Revenue = 'revenue'
}
/**
  * @export
  * @enum {string}
  */
export enum GetStatsOrderStatusEnum {
    Pending = 'pending',
    Cancelled = 'cancelled',
    Processing = 'processing',
    Shipping = 'shipping',
    Completed = 'completed',
    Refunded = 'refunded'
}
/**
  * @export
  * @enum {string}
  */
export enum GetStatsPaymentStatusEnum {
    Pending = 'pending',
    Cancelled = 'cancelled',
    Processing = 'processing',
    WaitForPayment = 'wait_for_payment',
    Completed = 'completed',
    Refunded = 'refunded'
}
/**
  * @export
  * @enum {string}
  */
export enum GetStatsGetByEnum {
    CreatedAt = 'createdAt',
    UpdatedAt = 'updatedAt'
}
/**
  * @export
  * @enum {string}
  */
export enum GetStatsSplitByEnum {
    Day = 'day',
    Week = 'week',
    Month = 'month',
    Year = 'year'
}
/**
  * @export
  * @enum {string}
  */
export enum GetStatsXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
/**
  * @export
  * @enum {string}
  */
export enum GetStatsOrdersGetByEnum {
    CreatedAt = 'createdAt',
    UpdatedAt = 'updatedAt'
}
/**
  * @export
  * @enum {string}
  */
export enum GetStatsOrdersXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
