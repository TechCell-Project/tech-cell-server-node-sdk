/* tslint:disable */
/* eslint-disable */
/**
 * TechCell RESTful API Documentations
 * This is the documentation for the TechCell RESTful API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: teams@techcell.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { AddCartRequestDTO } from '../models';
// @ts-ignore
import { CartDTO } from '../models';
// @ts-ignore
import { DeleteProductsCartRequestDTO } from '../models';
/**
 * CartsApi - axios parameter creator
 * @export
 */
export const CartsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add/update cart. If user already has cart, it will be updated. Set quantity to 0 to remove product from cart
         * @summary Add/update cart
         * @param {AddCartRequestDTO} addCartRequestDTO 
         * @param {AddCartXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCart: async (addCartRequestDTO: AddCartRequestDTO, xLang?: AddCartXLangEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addCartRequestDTO' is not null or undefined
            assertParamExists('addCart', 'addCartRequestDTO', addCartRequestDTO)
            const localVarPath = `/carts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addCartRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete products cart
         * @summary Delete products cart
         * @param {DeleteProductsCartRequestDTO} deleteProductsCartRequestDTO 
         * @param {DeleteProductsCartXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductsCart: async (deleteProductsCartRequestDTO: DeleteProductsCartRequestDTO, xLang?: DeleteProductsCartXLangEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteProductsCartRequestDTO' is not null or undefined
            assertParamExists('deleteProductsCart', 'deleteProductsCartRequestDTO', deleteProductsCartRequestDTO)
            const localVarPath = `/carts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteProductsCartRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get list of carts
         * @summary Get list of carts
         * @param {GetCartsXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCarts: async (xLang?: GetCartsXLangEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/carts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartsApi - functional programming interface
 * @export
 */
export const CartsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartsApiAxiosParamCreator(configuration)
    return {
        /**
         * Add/update cart. If user already has cart, it will be updated. Set quantity to 0 to remove product from cart
         * @summary Add/update cart
         * @param {AddCartRequestDTO} addCartRequestDTO 
         * @param {AddCartXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCart(addCartRequestDTO: AddCartRequestDTO, xLang?: AddCartXLangEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCart(addCartRequestDTO, xLang, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CartsApi.addCart']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Delete products cart
         * @summary Delete products cart
         * @param {DeleteProductsCartRequestDTO} deleteProductsCartRequestDTO 
         * @param {DeleteProductsCartXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProductsCart(deleteProductsCartRequestDTO: DeleteProductsCartRequestDTO, xLang?: DeleteProductsCartXLangEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProductsCart(deleteProductsCartRequestDTO, xLang, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CartsApi.deleteProductsCart']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get list of carts
         * @summary Get list of carts
         * @param {GetCartsXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCarts(xLang?: GetCartsXLangEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CartDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCarts(xLang, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CartsApi.getCarts']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * CartsApi - factory interface
 * @export
 */
export const CartsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartsApiFp(configuration)
    return {
        /**
         * Add/update cart. If user already has cart, it will be updated. Set quantity to 0 to remove product from cart
         * @summary Add/update cart
         * @param {CartsApiAddCartRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCart(requestParameters: CartsApiAddCartRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addCart(requestParameters.addCartRequestDTO, requestParameters.xLang, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete products cart
         * @summary Delete products cart
         * @param {CartsApiDeleteProductsCartRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductsCart(requestParameters: CartsApiDeleteProductsCartRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteProductsCart(requestParameters.deleteProductsCartRequestDTO, requestParameters.xLang, options).then((request) => request(axios, basePath));
        },
        /**
         * Get list of carts
         * @summary Get list of carts
         * @param {CartsApiGetCartsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCarts(requestParameters: CartsApiGetCartsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CartDTO> {
            return localVarFp.getCarts(requestParameters.xLang, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addCart operation in CartsApi.
 * @export
 * @interface CartsApiAddCartRequest
 */
export interface CartsApiAddCartRequest {
    /**
     * 
     * @type {AddCartRequestDTO}
     * @memberof CartsApiAddCart
     */
    readonly addCartRequestDTO: AddCartRequestDTO

    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof CartsApiAddCart
     */
    readonly xLang?: AddCartXLangEnum
}

/**
 * Request parameters for deleteProductsCart operation in CartsApi.
 * @export
 * @interface CartsApiDeleteProductsCartRequest
 */
export interface CartsApiDeleteProductsCartRequest {
    /**
     * 
     * @type {DeleteProductsCartRequestDTO}
     * @memberof CartsApiDeleteProductsCart
     */
    readonly deleteProductsCartRequestDTO: DeleteProductsCartRequestDTO

    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof CartsApiDeleteProductsCart
     */
    readonly xLang?: DeleteProductsCartXLangEnum
}

/**
 * Request parameters for getCarts operation in CartsApi.
 * @export
 * @interface CartsApiGetCartsRequest
 */
export interface CartsApiGetCartsRequest {
    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof CartsApiGetCarts
     */
    readonly xLang?: GetCartsXLangEnum
}

/**
 * CartsApi - object-oriented interface
 * @export
 * @class CartsApi
 * @extends {BaseAPI}
 */
export class CartsApi extends BaseAPI {
    /**
     * Add/update cart. If user already has cart, it will be updated. Set quantity to 0 to remove product from cart
     * @summary Add/update cart
     * @param {CartsApiAddCartRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsApi
     */
    public addCart(requestParameters: CartsApiAddCartRequest, options?: AxiosRequestConfig) {
        return CartsApiFp(this.configuration).addCart(requestParameters.addCartRequestDTO, requestParameters.xLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete products cart
     * @summary Delete products cart
     * @param {CartsApiDeleteProductsCartRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsApi
     */
    public deleteProductsCart(requestParameters: CartsApiDeleteProductsCartRequest, options?: AxiosRequestConfig) {
        return CartsApiFp(this.configuration).deleteProductsCart(requestParameters.deleteProductsCartRequestDTO, requestParameters.xLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get list of carts
     * @summary Get list of carts
     * @param {CartsApiGetCartsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartsApi
     */
    public getCarts(requestParameters: CartsApiGetCartsRequest = {}, options?: AxiosRequestConfig) {
        return CartsApiFp(this.configuration).getCarts(requestParameters.xLang, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
  * @export
  * @enum {string}
  */
export enum AddCartXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
/**
  * @export
  * @enum {string}
  */
export enum DeleteProductsCartXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
/**
  * @export
  * @enum {string}
  */
export enum GetCartsXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
