/* tslint:disable */
/* eslint-disable */
/**
 * TechCell RESTful API Documentations
 * This is the documentation for the TechCell RESTful API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: teams@techcell.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { GhnDistrictDTO } from '../models';
// @ts-ignore
import { GhnProvinceDTO } from '../models';
// @ts-ignore
import { GhnWardDTO } from '../models';
/**
 * AddressApi - axios parameter creator
 * @export
 */
export const AddressApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get districts
         * @param {number} provinceId Mã tỉnh thành
         * @param {GetDistrictsXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDistricts: async (provinceId: number, xLang?: GetDistrictsXLangEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'provinceId' is not null or undefined
            assertParamExists('getDistricts', 'provinceId', provinceId)
            const localVarPath = `/address/districts/{province_id}`
                .replace(`{${"province_id"}}`, encodeURIComponent(String(provinceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get provinces
         * @param {GetProvincesXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProvinces: async (xLang?: GetProvincesXLangEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/address/provinces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get wards
         * @param {number} districtId Mã quận huyện
         * @param {GetWardsXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWards: async (districtId: number, xLang?: GetWardsXLangEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'districtId' is not null or undefined
            assertParamExists('getWards', 'districtId', districtId)
            const localVarPath = `/address/wards/{district_id}`
                .replace(`{${"district_id"}}`, encodeURIComponent(String(districtId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xLang != null) {
                localVarHeaderParameter['x-lang'] = String(xLang);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AddressApi - functional programming interface
 * @export
 */
export const AddressApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AddressApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get districts
         * @param {number} provinceId Mã tỉnh thành
         * @param {GetDistrictsXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDistricts(provinceId: number, xLang?: GetDistrictsXLangEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GhnDistrictDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDistricts(provinceId, xLang, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AddressApi.getDistricts']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get provinces
         * @param {GetProvincesXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProvinces(xLang?: GetProvincesXLangEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GhnProvinceDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProvinces(xLang, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AddressApi.getProvinces']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get wards
         * @param {number} districtId Mã quận huyện
         * @param {GetWardsXLangEnum} [xLang] The language of the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWards(districtId: number, xLang?: GetWardsXLangEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GhnWardDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWards(districtId, xLang, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AddressApi.getWards']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * AddressApi - factory interface
 * @export
 */
export const AddressApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AddressApiFp(configuration)
    return {
        /**
         * 
         * @summary Get districts
         * @param {AddressApiGetDistrictsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDistricts(requestParameters: AddressApiGetDistrictsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<GhnDistrictDTO>> {
            return localVarFp.getDistricts(requestParameters.provinceId, requestParameters.xLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get provinces
         * @param {AddressApiGetProvincesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProvinces(requestParameters: AddressApiGetProvincesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<GhnProvinceDTO>> {
            return localVarFp.getProvinces(requestParameters.xLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get wards
         * @param {AddressApiGetWardsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWards(requestParameters: AddressApiGetWardsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<GhnWardDTO>> {
            return localVarFp.getWards(requestParameters.districtId, requestParameters.xLang, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getDistricts operation in AddressApi.
 * @export
 * @interface AddressApiGetDistrictsRequest
 */
export interface AddressApiGetDistrictsRequest {
    /**
     * Mã tỉnh thành
     * @type {number}
     * @memberof AddressApiGetDistricts
     */
    readonly provinceId: number

    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof AddressApiGetDistricts
     */
    readonly xLang?: GetDistrictsXLangEnum
}

/**
 * Request parameters for getProvinces operation in AddressApi.
 * @export
 * @interface AddressApiGetProvincesRequest
 */
export interface AddressApiGetProvincesRequest {
    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof AddressApiGetProvinces
     */
    readonly xLang?: GetProvincesXLangEnum
}

/**
 * Request parameters for getWards operation in AddressApi.
 * @export
 * @interface AddressApiGetWardsRequest
 */
export interface AddressApiGetWardsRequest {
    /**
     * Mã quận huyện
     * @type {number}
     * @memberof AddressApiGetWards
     */
    readonly districtId: number

    /**
     * The language of the response
     * @type {'en' | 'vi_VN'}
     * @memberof AddressApiGetWards
     */
    readonly xLang?: GetWardsXLangEnum
}

/**
 * AddressApi - object-oriented interface
 * @export
 * @class AddressApi
 * @extends {BaseAPI}
 */
export class AddressApi extends BaseAPI {
    /**
     * 
     * @summary Get districts
     * @param {AddressApiGetDistrictsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressApi
     */
    public getDistricts(requestParameters: AddressApiGetDistrictsRequest, options?: AxiosRequestConfig) {
        return AddressApiFp(this.configuration).getDistricts(requestParameters.provinceId, requestParameters.xLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get provinces
     * @param {AddressApiGetProvincesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressApi
     */
    public getProvinces(requestParameters: AddressApiGetProvincesRequest = {}, options?: AxiosRequestConfig) {
        return AddressApiFp(this.configuration).getProvinces(requestParameters.xLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get wards
     * @param {AddressApiGetWardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressApi
     */
    public getWards(requestParameters: AddressApiGetWardsRequest, options?: AxiosRequestConfig) {
        return AddressApiFp(this.configuration).getWards(requestParameters.districtId, requestParameters.xLang, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
  * @export
  * @enum {string}
  */
export enum GetDistrictsXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
/**
  * @export
  * @enum {string}
  */
export enum GetProvincesXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
/**
  * @export
  * @enum {string}
  */
export enum GetWardsXLangEnum {
    En = 'en',
    ViVn = 'vi_VN'
}
